"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[89660],{58943:(e,n,t)=>{t.d(n,{x:()=>p});var r=t(86010),o=t(67294),a=t(73808),i=t(96319),s=t(79526);const d=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,r.Z)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){l(e,n,t[n])}))}return e}function c(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function m(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const p=e=>{var n;return"nextjs"===(null===(n=e)||void 0===n?void 0:n.template)?o.createElement(h,e):o.createElement(f,e)},f=e=>{var n,t,l,p,f,h,g,v,b,P,y,x,w,k,R,{startRoute:T,showNavigator:N,showLineNumbers:C,showOpenInCodeSandbox:S,initialPercentage:I=50,dependencies:M,showReadOnly:L,options:B={showTabs:!0,initMode:"lazy",classes:{"sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,r.Z)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-tab-button":(0,r.Z)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:A="react-ts",customSetup:O,files:E,previewOnly:F,layout:D,height:G=420,wrapperClassName:V,className:K,showFiles:j=!1,showConsole:H=!1,hidePreview:z=!1}=e,U=m(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[q,W]=o.useState(!1);o.useEffect((()=>{W(!0)}),[]);const{colorMode:_}=(0,s.I)();var Q,$;null!=B||(B={}),null!==(Q=(k=B).resizablePanels)&&void 0!==Q||(k.resizablePanels=!0),null!==($=(R=B).editorWidthPercentage)&&void 0!==$||(R.editorWidthPercentage=null!=I?I:50);const Z={showTabs:B.showTabs,showLineNumbers:B.showLineNumbers,showInlineErrors:B.showInlineErrors,wrapContent:B.wrapContent,closableTabs:B.closableTabs,initMode:B.initMode,extensions:null===(n=B.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=B.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:B.readOnly,showReadOnly:null!=L?L:B.showReadOnly,additionalLanguages:null===(l=B.codeEditor)||void 0===l?void 0:l.additionalLanguages},J={activeFile:B.activeFile,visibleFiles:B.visibleFiles,recompileMode:B.recompileMode,recompileDelay:B.recompileDelay,autorun:B.autorun,autoReload:B.autoReload,bundlerURL:B.bundlerURL,startRoute:B.startRoute,skipEval:B.skipEval,fileResolver:B.fileResolver,initMode:B.initMode,initModeObserverOptions:B.initModeObserverOptions,externalResources:B.externalResources,logLevel:B.logLevel,classes:B.classes},[X,Y]=o.useState(!1),{onHandleMouseDown:ee,horizontalSize:ne}=(({initialSize:e=50})=>{const[n,t]=o.useState(e),r=o.useRef(null),a=e=>{if(!r.current)return;const n=r.current.parentElement;if(!n)return;const{left:o,width:a}=n.getBoundingClientRect(),i=(e.clientX-o)/a*100,s=Math.min(Math.max(i,25),75);t(s),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const n=null===(e=r.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:B.editorWidthPercentage}),te=!F&&!(null===(f=D)||void 0===f||null===(p=f.includes)||void 0===p?void 0:p.call(f,"col"));var re,oe,ae,ie,se,de;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.Z)("pb-6",V)},o.createElement("div",{className:(0,r.Z)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",K)},o.createElement(i.oT,u({key:`${A}-${_}-${q}`,customSetup:u({dependencies:M},O),files:E,options:J,template:A,theme:"light"===_?c(u({},a.FM),{colors:c(u({},a.FM.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):c(u({},a.I2),{colors:c(u({},a.I2.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,r.Z)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},U),o.createElement(i.sp,{className:(0,r.Z)("col"===D&&"!flex-col","col-reverse"===D&&"!flex-col-reverse")},j&&o.createElement(i.Lj,{autoHiddenFiles:!0,style:{height:null!==(re=B.editorHeight)&&void 0!==re?re:G}}),!F&&o.createElement(i._V,c(u({},Z),{showLineNumbers:C,closableTabs:j,initMode:"lazy",style:c(u({height:null!==(oe=B.editorHeight)&&void 0!==oe?oe:G},(null===(g=D)||void 0===g||null===(h=g.includes)||void 0===h?void 0:h.call(g,"col"))?{flex:"initial"}:{flexGrow:ne,flexShrink:ne,flexBasis:0}),{overflow:"hidden"})})),H?o.createElement(i.Tq,{style:c(u({height:null!==(ae=B.editorHeight)&&void 0!==ae?ae:G},(null===(b=D)||void 0===b||null===(v=b.includes)||void 0===v?void 0:v.call(b,"col"))?{flex:"initial"}:{flexGrow:ne,flexShrink:ne,flexBasis:0}),{overflow:"hidden"})}):null,te?o.createElement(d,{onMouseDown:ee,horizontalSize:ne}):null,z?null:o.createElement(o.Fragment,null,o.createElement(i.Gj,{showOpenInCodeSandbox:S,startRoute:T,showNavigator:null!=N?N:B.showNavigator,showRefreshButton:B.showRefreshButton,style:c(u({display:z?"none":"flex"},(null===(y=D)||void 0===y||null===(P=y.includes)||void 0===P?void 0:P.call(y,"col"))?{flex:"initial",width:"100%"}:{flexGrow:100-ne,flexShrink:100-ne,flexBasis:0,width:F?"100%":100-ne+"%"}),{gap:0,height:null!==(ie=B.editorHeight)&&void 0!==ie?ie:G})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.Z)("w-12","h-12","rounded-full")}))))))),o.createElement("div",{className:(0,r.Z)(""),style:{height:Number(null!==(se=B.editorHeight)&&void 0!==se?se:G)+2}}),o.createElement("div",{className:(0,r.Z)((null===(w=D)||void 0===w||null===(x=w.includes)||void 0===x?void 0:x.call(w,"col"))?"block":"block md:hidden"),style:{height:Number(null!==(de=B.editorHeight)&&void 0!==de?de:G)+2}})),o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("p",null,`Dependencies: ${Object.keys(null!=M?M:{}).map((e=>`${e}@${M[e]}`))}`),o.createElement("h3",null,"Code Files"),Object.keys(null!=E?E:{}).map((e=>o.createElement("div",{key:e},o.createElement("div",null,`File: ${e}`),o.createElement("div",null,`Content: ${"code"in E[e]?E[e].code:E[e]}`))))))},h=e=>{const n={hidePreview:!0};return o.createElement(f,c(u({},e,n),{template:"react-ts"}))};'\nimport { NavigateToResource } from "@refinedev/nextjs-router";\n\nconst Home = () => {\n    return <NavigateToResource resource="products" />;\n};\n\nexport default Home;\n'.trim()},20993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Ne,contentTitle:()=>Re,default:()=>Ae,frontMatter:()=>ke,metadata:()=>Te,toc:()=>Ce});var r=t(67294),o=t(3905),a=t(58943);function i(){return r.createElement(a.x,{showNavigator:!0,previewOnly:!0,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","react-router":"latest","react-router-dom":"^6.8.1"},startRoute:"/products",files:{"/App.tsx":{code:l,active:!0},"/pages/products/index.tsx":{code:d},"/pages/products/list.tsx":{code:u},"/pages/products/show.tsx":{code:c},"/pages/products/edit.tsx":{code:m},"/pages/products/create.tsx":{code:p},"/auth-provider.tsx":{code:s,hidden:!0}}})}const s='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),d='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),l='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    AuthPage\n} from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router-dom";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductCreate, ProductEdit, ProductShow } from "./pages/products";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <MantineProvider\n                theme={RefineThemes.Blue}\n                withNormalizeCSS\n                withGlobalStyles\n            >\n                <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n                <NotificationsProvider position="top-right">\n                    <Refine\n                        notificationProvider={notificationProvider}\n                        routerProvider={routerProvider}\n                        dataProvider={dataProvider(\n                            "https://api.fake-rest.refine.dev",\n                        )}\n                        authProvider={authProvider}\n                        resources={[\n                            {\n                                name: "products",\n                                list: "/products",\n                                show: "/products/:id",\n                                edit: "/products/:id/edit",\n                                create: "/products/create",\n                                meta: {\n                                    canDelete: true,\n                                },\n                            },\n                        ]}\n                    >\n                        <Routes>\n                            <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                            <Route\n                                element={\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                }\n                            >\n                                <Route index element={<NavigateToResource resource="products" />} />\n                                <Route path="/products" element={<Outlet />}>\n                                    <Route index element={<ProductList />} />\n                                    <Route path="create" element={<ProductCreate />} />\n                                    <Route path=":id" element={<ProductShow />} />\n                                    <Route path=":id/edit" element={<ProductEdit />} />\n                                </Route>\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                            </Route>\n                            <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                                <Route\n                                    path="/login"\n                                    element={(\n                                    <AuthPage\n                                        type="login"\n                                        formProps={{\n                                        initialValues: {\n                                            email: "demo@refine.dev",\n                                            password: "demodemo",\n                                        },\n                                        }}\n                                    />\n                                    )}\n                                />\n                                <Route path="/register" element={<AuthPage type="register" />} />\n                                <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                                <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                        </Routes>\n                    </Refine>\n                </NotificationsProvider>\n            </MantineProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),u='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, ShowButton, EditButton, DeleteButton } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n              id: "material",\n              header: "Material",\n              accessorKey: "material",\n          },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <Group spacing="xs" noWrap>\n                            <ShowButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                        </Group>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <ScrollArea>\n            <List>\n                <Table highlightOnHover>\n                    <thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <th key={header.id}>\n                                        {flexRender(\n                                            header.column.columnDef\n                                                .header,\n                                            header.getContext(),\n                                        )}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody>\n                        {getRowModel().rows.map((row) => (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <br />\n                <Pagination\n                    position="right"\n                    total={pageCount}\n                    page={current}\n                    onChange={setCurrent}\n                />\n            </List>\n        </ScrollArea>\n    );\n};\n'.trim(),c='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/mantine";\n\nimport { Title } from "@mantine/core";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Title order={5}>Id</Title>\n            <TextField value={record?.id} />\n\n            <Title mt="xs" order={5}>Name</Title>\n            <TextField value={record?.name} />\n\n            <Title mt="xs" order={5}>Material</Title>\n            <TextField value={record?.material} />\n\n            <Title mt="xs" order={5}>Description</Title>\n            <MarkdownField value={record?.description} />\n\n            <Title mt="xs" order={5}>Price</Title>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),m='\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductEdit = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n      refineCore: { queryResult, autoSaveProps },\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} autoSaveProps={autoSaveProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Edit>\n  );\n};\n'.trim(),p='\nimport { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductCreate = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Create>\n  );\n};\n'.trim();function f(){return r.createElement(a.x,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","@refinedev/react-router-v6":"^4.5.4","react-router":"latest","react-router-dom":"^6.8.1"},startRoute:"/products",files:{"/App.tsx":{code:v,active:!0},"/pages/products/index.tsx":{code:g},"/pages/products/list.tsx":{code:b},"/pages/products/show.tsx":{code:P},"/pages/products/edit.tsx":{code:y},"/pages/products/create.tsx":{code:x},"/auth-provider.tsx":{code:h,hidden:!0}}})}const h='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),g='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),v='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    AuthPage\n} from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router-dom";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductCreate, ProductEdit, ProductShow } from "./pages/products";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <MantineProvider\n                theme={RefineThemes.Blue}\n                withNormalizeCSS\n                withGlobalStyles\n            >\n                <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n                <NotificationsProvider position="top-right">\n                    <Refine\n                        notificationProvider={notificationProvider}\n                        routerProvider={routerProvider}\n                        dataProvider={dataProvider(\n                            "https://api.fake-rest.refine.dev",\n                        )}\n                        authProvider={authProvider}\n                        resources={[\n                            {\n                                name: "products",\n                                list: "/products",\n                                show: "/products/:id",\n                                edit: "/products/:id/edit",\n                                create: "/products/create",\n                                meta: {\n                                    canDelete: true,\n                                },\n                            },\n                        ]}\n                    >\n                        <Routes>\n                            <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                            <Route\n                                element={\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                }\n                            >\n                                <Route index element={<NavigateToResource resource="products" />} />\n                                <Route path="/products" element={<Outlet />}>\n                                    <Route index element={<ProductList />} />\n                                    <Route path="create" element={<ProductCreate />} />\n                                    <Route path=":id" element={<ProductShow />} />\n                                    <Route path=":id/edit" element={<ProductEdit />} />\n                                </Route>\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                            </Route>\n                            <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                                <Route\n                                    path="/login"\n                                    element={(\n                                    <AuthPage\n                                        type="login"\n                                        formProps={{\n                                        initialValues: {\n                                            email: "demo@refine.dev",\n                                            password: "demodemo",\n                                        },\n                                        }}\n                                    />\n                                    )}\n                                />\n                                <Route path="/register" element={<AuthPage type="register" />} />\n                                <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                                <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                        </Routes>\n                    </Refine>\n                </NotificationsProvider>\n            </MantineProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),b='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, ShowButton, EditButton, DeleteButton } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n              id: "material",\n              header: "Material",\n              accessorKey: "material",\n          },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <Group spacing="xs" noWrap>\n                            <ShowButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                        </Group>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <ScrollArea>\n            <List>\n                <Table highlightOnHover>\n                    <thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <th key={header.id}>\n                                        {flexRender(\n                                            header.column.columnDef\n                                                .header,\n                                            header.getContext(),\n                                        )}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody>\n                        {getRowModel().rows.map((row) => (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <br />\n                <Pagination\n                    position="right"\n                    total={pageCount}\n                    page={current}\n                    onChange={setCurrent}\n                />\n            </List>\n        </ScrollArea>\n    );\n};\n'.trim(),P='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/mantine";\n\nimport { Title } from "@mantine/core";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Title order={5}>Id</Title>\n            <TextField value={record?.id} />\n\n            <Title mt="xs" order={5}>Name</Title>\n            <TextField value={record?.name} />\n\n            <Title mt="xs" order={5}>Material</Title>\n            <TextField value={record?.material} />\n\n            <Title mt="xs" order={5}>Description</Title>\n            <MarkdownField value={record?.description} />\n\n            <Title mt="xs" order={5}>Price</Title>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),y='\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductEdit = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n      refineCore: { queryResult, autoSaveProps },\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} autoSaveProps={autoSaveProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Edit>\n  );\n};\n'.trim(),x='\nimport { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductCreate = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Create>\n  );\n};\n'.trim();function w(){return r.createElement(a.x,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","@refinedev/nextjs-router":"latest"},startRoute:"/products",files:{"/pages/_app.tsx":{code:T,active:!0},"/pages/products/index.tsx":{code:N},"/pages/products/[id].tsx":{code:C},"/pages/products/[id]/edit.tsx":{code:S},"/pages/products/create.tsx":{code:I},"/pages/login.tsx":{code:R},"/src/auth-provider.tsx":{code:k,hidden:!0}}})}const k='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),R='\nimport React from "react";\nimport { AuthPage } from "@refinedev/mantine";\nimport authProvider from "../src/auth-provider";\n\nimport type { ExtendedNextPage } from "./_app";\n\nconst Login: ExtendedNextPage = () => {\n  return <AuthPage type="login" />;\n};\n\nLogin.noLayout = true;\n\nexport default Login;\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (authenticated) {\n    return {\n      redirect: {\n        destination: "/products",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n'.trim(),T='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport { RefineThemes, ThemedLayoutV2, notificationProvider } from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\n\nimport authProvider from "../src/auth-provider";\n\nexport type ExtendedNextPage = NextPage & {\n  noLayout?: boolean;\n};\n\ntype ExtendedAppProps = AppProps & {\n  Component: ExtendedNextPage;\n};\n\nfunction App({ Component, pageProps }: ExtendedAppProps) {\n  const renderComponent = () => {\n      if (Component.noLayout) {\n          return <Component {...pageProps} />;\n      }\n\n      return (\n          <ThemedLayoutV2>\n              <Component {...pageProps} />\n          </ThemedLayoutV2>\n      );\n  }\n\n  return (\n    <MantineProvider\n      theme={RefineThemes.Blue}\n      withNormalizeCSS\n      withGlobalStyles\n    >\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          notificationProvider={notificationProvider}\n          authProvider={authProvider}\n          resources={[\n            {\n              name: "products",\n              list: "/products",\n              show: "/products/:id",\n              edit: "/products/:id/edit",\n              create: "/products/create"\n            },\n          ]}\n          options={{ syncWithLocation: true }}\n        >\n          {renderComponent()}\n        </Refine>\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n\nexport default App;\n'.trim(),N='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, ShowButton, EditButton, DeleteButton } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n      () => [\n          {\n              id: "id",\n              header: "ID",\n              accessorKey: "id",\n          },\n          {\n              id: "name",\n              header: "Name",\n              accessorKey: "name",\n              meta: {\n                  filterOperator: "contains",\n              },\n          },\n          {\n            id: "material",\n            header: "Material",\n            accessorKey: "material",\n        },\n          {\n              id: "price",\n              header: "Price",\n              accessorKey: "price",\n          },\n          {\n              id: "actions",\n              header: "Actions",\n              accessorKey: "id",\n              enableColumnFilter: false,\n              enableSorting: false,\n              cell: function render({ getValue }) {\n                  return (\n                      <Group spacing="xs" noWrap>\n                          <ShowButton\n                              hideText\n                              recordItemId={getValue() as number}\n                          />\n                          <EditButton\n                              hideText\n                              recordItemId={getValue() as number}\n                          />\n                          <DeleteButton\n                              hideText\n                              recordItemId={getValue() as number}\n                          />\n                      </Group>\n                  );\n              },\n          },\n      ],\n      [],\n  );\n\n  const {\n      getHeaderGroups,\n      getRowModel,\n      setOptions,\n      refineCore: {\n          setCurrent,\n          pageCount,\n          current,\n          tableQueryResult: { data: tableData },\n      },\n  } = useTable({\n      columns,\n      refineCoreProps: {\n          initialSorter: [\n              {\n                  field: "id",\n                  order: "desc",\n              },\n          ],\n      },\n  });\n\n  return (\n      <ScrollArea>\n          <List>\n              <Table highlightOnHover>\n                  <thead>\n                      {getHeaderGroups().map((headerGroup) => (\n                          <tr key={headerGroup.id}>\n                              {headerGroup.headers.map((header) => (\n                                  <th key={header.id}>\n                                      {flexRender(\n                                          header.column.columnDef\n                                              .header,\n                                          header.getContext(),\n                                      )}\n                                  </th>\n                              ))}\n                          </tr>\n                      ))}\n                  </thead>\n                  <tbody>\n                      {getRowModel().rows.map((row) => (\n                          <tr key={row.id}>\n                              {row.getVisibleCells().map((cell) => (\n                                  <td key={cell.id}>\n                                      {flexRender(\n                                          cell.column.columnDef.cell,\n                                          cell.getContext(),\n                                      )}\n                                  </td>\n                              ))}\n                          </tr>\n                      ))}\n                  </tbody>\n              </Table>\n              <br />\n              <Pagination\n                  position="right"\n                  total={pageCount}\n                  page={current}\n                  onChange={setCurrent}\n              />\n          </List>\n      </ScrollArea>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),C='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/mantine";\n\nimport { Title } from "@mantine/core";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductShow() {\n  const { queryResult } = useShow();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  return (\n      <Show isLoading={isLoading}>\n          <Title order={5}>Id</Title>\n          <TextField value={record?.id} />\n\n          <Title mt="xs" order={5}>Name</Title>\n          <TextField value={record?.name} />\n\n          <Title mt="xs" order={5}>Material</Title>\n          <TextField value={record?.material} />\n\n          <Title mt="xs" order={5}>Description</Title>\n          <MarkdownField value={record?.description} />\n\n          <Title mt="xs" order={5}>Price</Title>\n          <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n      </Show>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),S='\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nimport authProvider from "../../../src/auth-provider";\n\nexport default function ProductEdit() {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n      refineCore: { queryResult, autoSaveProps },\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} autoSaveProps={autoSaveProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Edit>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),I='\nimport { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductCreate() {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Create>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim();function M(){return r.createElement(a.x,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","@refinedev/remix-router":"latest"},startRoute:"/products",files:{"/app/root.tsx":{code:B,active:!0},"/app/routes/_protected.tsx":{code:A},"/app/routes/_protected.products._index.tsx":{code:F},"/app/routes/_protected.products.$id.tsx":{code:D},"/app/routes/_protected.products.$id.edit.tsx":{code:G},"/app/routes/_protected.products.create.tsx":{code:V},"/app/routes/_auth.tsx":{code:O},"/app/routes/_auth.login.tsx":{code:E},"/app/auth-provider.tsx":{code:L,hidden:!0}}})}const L='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),B='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { RefineThemes, ThemedLayoutV2, notificationProvider } from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\n\nimport authProvider from "./auth-provider";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <MantineProvider\n            theme={RefineThemes.Blue}\n            withNormalizeCSS\n            withGlobalStyles\n        >\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <NotificationsProvider position="top-right">\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                    authProvider={authProvider}\n                    notificationProvider={notificationProvider}\n                    resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        show: "/products/:id",\n                        edit: "/products/:id/edit",\n                        create: "/products/create",\n                    },\n                    ]}\n                    options={{ syncWithLocation: true }}\n                >\n                    <Outlet />\n                </Refine>\n            </NotificationsProvider>\n        </MantineProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),A='\nimport { ThemedLayoutV2 } from "@refinedev/mantine";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderArgs, redirect } from "@remix-run/node";\n\nimport authProvider from "../auth-provider";\n\nexport default function AuthenticatedLayout() {\n    // `<ThemedLayoutV2>` is only applied to the authenticated users\n    return (\n        <ThemedLayoutV2>\n            <Outlet />\n        </ThemedLayoutV2>\n    );\n}\n\n/**\n * We\'re checking if the current session is authenticated.\n * If not, we\'re redirecting the user to the login page.\n * This is applied for all routes that are nested under this layout (_protected).\n */\nexport async function loader({ request }: LoaderArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (!authenticated) {\n        throw redirect(redirectTo ?? "/login");\n    }\n\n    return {};\n}\n'.trim(),O='\nimport { Outlet } from "@remix-run/react";\nimport { LoaderArgs, redirect } from "@remix-run/node";\n\nimport { authProvider } from "~/authProvider";\n\nexport default function AuthLayout() {\n    // no layout is applied for the auth routes\n    return <Outlet />;\n}\n\n/**\n * If the current session is authenticated, we\'re redirecting the user to the home page.\n * Alternatively, we could also use the `Authenticated` component inside the `AuthLayout` to handle the redirect.\n * But, server-side redirects are more performant.\n */\nexport async function loader({ request }: LoaderArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (authenticated) {\n        throw redirect(redirectTo ?? "/");\n    }\n\n    return {};\n}\n'.trim(),E='\nimport { AuthPage } from "@refinedev/mantine";\n\nexport default function LoginPage() {\n  return <AuthPage type="login" />;\n}\n\n'.trim(),F='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, ShowButton, EditButton, DeleteButton } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n      () => [\n          {\n              id: "id",\n              header: "ID",\n              accessorKey: "id",\n          },\n          {\n              id: "name",\n              header: "Name",\n              accessorKey: "name",\n              meta: {\n                  filterOperator: "contains",\n              },\n          },\n          {\n            id: "material",\n            header: "Material",\n            accessorKey: "material",\n        },\n          {\n              id: "price",\n              header: "Price",\n              accessorKey: "price",\n          },\n          {\n              id: "actions",\n              header: "Actions",\n              accessorKey: "id",\n              enableColumnFilter: false,\n              enableSorting: false,\n              cell: function render({ getValue }) {\n                  return (\n                      <Group spacing="xs" noWrap>\n                          <ShowButton\n                              hideText\n                              recordItemId={getValue() as number}\n                          />\n                          <EditButton\n                              hideText\n                              recordItemId={getValue() as number}\n                          />\n                          <DeleteButton\n                              hideText\n                              recordItemId={getValue() as number}\n                          />\n                      </Group>\n                  );\n              },\n          },\n      ],\n      [],\n  );\n\n  const {\n      getHeaderGroups,\n      getRowModel,\n      setOptions,\n      refineCore: {\n          setCurrent,\n          pageCount,\n          current,\n          tableQueryResult: { data: tableData },\n      },\n  } = useTable({\n      columns,\n      refineCoreProps: {\n          initialSorter: [\n              {\n                  field: "id",\n                  order: "desc",\n              },\n          ],\n      },\n  });\n\n  return (\n      <ScrollArea>\n          <List>\n              <Table highlightOnHover>\n                  <thead>\n                      {getHeaderGroups().map((headerGroup) => (\n                          <tr key={headerGroup.id}>\n                              {headerGroup.headers.map((header) => (\n                                  <th key={header.id}>\n                                      {flexRender(\n                                          header.column.columnDef\n                                              .header,\n                                          header.getContext(),\n                                      )}\n                                  </th>\n                              ))}\n                          </tr>\n                      ))}\n                  </thead>\n                  <tbody>\n                      {getRowModel().rows.map((row) => (\n                          <tr key={row.id}>\n                              {row.getVisibleCells().map((cell) => (\n                                  <td key={cell.id}>\n                                      {flexRender(\n                                          cell.column.columnDef.cell,\n                                          cell.getContext(),\n                                      )}\n                                  </td>\n                              ))}\n                          </tr>\n                      ))}\n                  </tbody>\n              </Table>\n              <br />\n              <Pagination\n                  position="right"\n                  total={pageCount}\n                  page={current}\n                  onChange={setCurrent}\n              />\n          </List>\n      </ScrollArea>\n  );\n};\n'.trim(),D='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/mantine";\n\nimport { Title } from "@mantine/core";\n\nexport default function ProductShow() {\n  const { queryResult } = useShow();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  return (\n      <Show isLoading={isLoading}>\n          <Title order={5}>Id</Title>\n          <TextField value={record?.id} />\n\n          <Title mt="xs" order={5}>Name</Title>\n          <TextField value={record?.name} />\n\n          <Title mt="xs" order={5}>Material</Title>\n          <TextField value={record?.material} />\n\n          <Title mt="xs" order={5}>Description</Title>\n          <MarkdownField value={record?.description} />\n\n          <Title mt="xs" order={5}>Price</Title>\n          <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n      </Show>\n  );\n};\n'.trim(),G='\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport default function ProductEdit() {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n      refineCore: { queryResult, autoSaveProps },\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} autoSaveProps={autoSaveProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Edit>\n  );\n};\n'.trim(),V='\nimport { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport default function ProductCreate() {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Create>\n  );\n};\n'.trim();function K(){return r.createElement(a.x,{showNavigator:!0,initialPercentage:35,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","react-router":"latest","react-router-dom":"^6.8.1"},startRoute:"/products",files:{"/App.tsx":{code:j,active:!0},"/pages/products/list.tsx":{code:H,hidden:!0}}})}const j='\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { BrowserRouter, Route, Routes, Outlet } from "react-router-dom";\n\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    AuthPage\n} from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\n\nimport { ProductList } from "./pages/products/list";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n        <MantineProvider\n            theme={RefineThemes.Blue}\n            withNormalizeCSS\n            withGlobalStyles\n        >\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <NotificationsProvider position="top-right">\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                    notificationProvider={notificationProvider}\n                    resources={[\n                        {\n                            name: "products",\n                            list: "/products",\n                        }\n                    ]}\n                >\n                    <Routes>\n                        <Route\n                            // The layout will wrap all the pages inside this route\n                            element={\n                            <ThemedLayoutV2>\n                                <Outlet />\n                            </ThemedLayoutV2>\n                            }\n                        >\n                            <Route path="/products" element={<ProductList />} />\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </NotificationsProvider>\n        </MantineProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),H='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Table, Pagination } from "@mantine/core";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n              id: "material",\n              header: "Material",\n              accessorKey: "material",\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <ScrollArea>\n            <List>\n                <Table highlightOnHover>\n                    <thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <th key={header.id}>\n                                        {flexRender(\n                                            header.column.columnDef\n                                                .header,\n                                            header.getContext(),\n                                        )}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody>\n                        {getRowModel().rows.map((row) => (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <br />\n                <Pagination\n                    position="right"\n                    total={pageCount}\n                    page={current}\n                    onChange={setCurrent}\n                />\n            </List>\n        </ScrollArea>\n    );\n};\n'.trim();function z(){return r.createElement(a.x,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","@refinedev/nextjs-router":"latest"},startRoute:"/products",files:{"/pages/_app.tsx":{code:U,active:!0},"/pages/products/index.tsx":{code:q,hidden:!0}}})}const U='\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport {\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n} from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\n\nfunction App({ Component, pageProps }: AppProps) {\n    return (\n        <MantineProvider\n            theme={RefineThemes.Blue}\n            withNormalizeCSS\n            withGlobalStyles\n        >\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <NotificationsProvider position="top-right">\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                    notificationProvider={notificationProvider}\n                    resources={[\n                        {\n                        name: "products",\n                        list: "/products",\n                        },\n                    ]}\n                >\n                    <ThemedLayoutV2>\n                        <Component {...pageProps} />\n                    </ThemedLayoutV2>\n                </Refine>\n            </NotificationsProvider>\n        </MantineProvider>\n    );\n}\n\nexport default App;\n'.trim(),q='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../components/pagination";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim();function W(){return r.createElement(a.x,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","@refinedev/remix-router":"latest"},startRoute:"/products",files:{"/app/root.tsx":{code:_},"/app/routes/_layout.tsx":{code:Q,active:!0},"/app/routes/_layout.products._index.tsx":{code:$,hidden:!0}}})}const _='\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { RefineThemes, ThemedLayoutV2, notificationProvider } from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <MantineProvider\n            theme={RefineThemes.Blue}\n            withNormalizeCSS\n            withGlobalStyles\n        >\n          <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n          <NotificationsProvider position="top-right">\n            <Refine\n              routerProvider={routerProvider}\n              dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n              notificationProvider={notificationProvider}\n              resources={[\n                {\n                  name: "products",\n                  list: "/products",\n                },\n              ]}\n            >\n              <Outlet />\n            </Refine>\n          </NotificationsProvider>\n        </MantineProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),Q='\nimport { ThemedLayoutV2 } from "@refinedev/mantine";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderArgs, redirect } from "@remix-run/node";\n\n/**\n * Routes starting with `_layout` will have their children rendered inside the layout.\n */\nexport default function Layout() {\n    return (\n        <ThemedLayoutV2>\n            <Outlet />\n        </ThemedLayoutV2>\n    );\n}\n'.trim(),$='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n      () => [\n          {\n              id: "id",\n              header: "ID",\n              accessorKey: "id",\n          },\n          {\n              id: "name",\n              header: "Name",\n              accessorKey: "name",\n              meta: {\n                  filterOperator: "contains",\n              },\n          },\n          {\n            id: "material",\n            header: "Material",\n            accessorKey: "material",\n        },\n          {\n              id: "price",\n              header: "Price",\n              accessorKey: "price",\n          },\n      ],\n      [],\n  );\n\n  const {\n      getHeaderGroups,\n      getRowModel,\n      setOptions,\n      refineCore: {\n          setCurrent,\n          pageCount,\n          current,\n          tableQueryResult: { data: tableData },\n      },\n  } = useTable({\n      columns,\n      refineCoreProps: {\n          initialSorter: [\n              {\n                  field: "id",\n                  order: "desc",\n              },\n          ],\n      },\n  });\n\n  return (\n      <ScrollArea>\n          <List>\n              <Table highlightOnHover>\n                  <thead>\n                      {getHeaderGroups().map((headerGroup) => (\n                          <tr key={headerGroup.id}>\n                              {headerGroup.headers.map((header) => (\n                                  <th key={header.id}>\n                                      {flexRender(\n                                          header.column.columnDef\n                                              .header,\n                                          header.getContext(),\n                                      )}\n                                  </th>\n                              ))}\n                          </tr>\n                      ))}\n                  </thead>\n                  <tbody>\n                      {getRowModel().rows.map((row) => (\n                          <tr key={row.id}>\n                              {row.getVisibleCells().map((cell) => (\n                                  <td key={cell.id}>\n                                      {flexRender(\n                                          cell.column.columnDef.cell,\n                                          cell.getContext(),\n                                      )}\n                                  </td>\n                              ))}\n                          </tr>\n                      ))}\n                  </tbody>\n              </Table>\n              <br />\n              <Pagination\n                  position="right"\n                  total={pageCount}\n                  page={current}\n                  onChange={setCurrent}\n              />\n          </List>\n      </ScrollArea>\n  );\n};\n'.trim();function Z(){return r.createElement(a.x,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","react-router":"latest","react-router-dom":"^6.8.1"},startRoute:"/products",files:{"/App.tsx":{code:X,hidden:!0},"/pages/products/index.tsx":{code:J,hidden:!0},"/pages/products/list.tsx":{code:Y,active:!0},"/pages/products/show.tsx":{code:ee},"/pages/products/edit.tsx":{code:ne},"/pages/products/create.tsx":{code:te}}})}const J='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),X='\nimport { Refine } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider\n} from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router-dom";\n\nimport { ProductList, ProductCreate, ProductEdit, ProductShow } from "./pages/products";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <MantineProvider\n                theme={RefineThemes.Blue}\n                withNormalizeCSS\n                withGlobalStyles\n            >\n                <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n                <NotificationsProvider position="top-right">\n                    <Refine\n                        notificationProvider={notificationProvider}\n                        routerProvider={routerProvider}\n                        dataProvider={dataProvider(\n                            "https://api.fake-rest.refine.dev",\n                        )}\n                        resources={[\n                            {\n                                name: "products",\n                                list: "/products",\n                                show: "/products/:id",\n                                edit: "/products/:id/edit",\n                                create: "/products/create",\n                                meta: {\n                                    canDelete: true,\n                                },\n                            },\n                        ]}\n                    >\n                        <Routes>\n                            <Route\n                                element={\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                }\n                            >\n                                <Route index element={<NavigateToResource resource="products" />} />\n                                <Route path="/products" element={<Outlet />}>\n                                    <Route index element={<ProductList />} />\n                                    <Route path="create" element={<ProductCreate />} />\n                                    <Route path=":id" element={<ProductShow />} />\n                                    <Route path=":id/edit" element={<ProductEdit />} />\n                                </Route>\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                        </Routes>\n                    </Refine>\n                </NotificationsProvider>\n            </MantineProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),Y='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, ShowButton, EditButton, DeleteButton } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n              id: "material",\n              header: "Material",\n              accessorKey: "material",\n          },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <Group spacing="xs" noWrap>\n                            <ShowButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                        </Group>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <ScrollArea>\n            <List>\n                <Table highlightOnHover>\n                    <thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <th key={header.id}>\n                                        {flexRender(\n                                            header.column.columnDef\n                                                .header,\n                                            header.getContext(),\n                                        )}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody>\n                        {getRowModel().rows.map((row) => (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <br />\n                <Pagination\n                    position="right"\n                    total={pageCount}\n                    page={current}\n                    onChange={setCurrent}\n                />\n            </List>\n        </ScrollArea>\n    );\n};\n'.trim(),ee='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/mantine";\n\nimport { Title } from "@mantine/core";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Title order={5}>Id</Title>\n            <TextField value={record?.id} />\n\n            <Title mt="xs" order={5}>Name</Title>\n            <TextField value={record?.name} />\n\n            <Title mt="xs" order={5}>Material</Title>\n            <TextField value={record?.material} />\n\n            <Title mt="xs" order={5}>Description</Title>\n            <MarkdownField value={record?.description} />\n\n            <Title mt="xs" order={5}>Price</Title>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),ne='\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductEdit = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n      refineCore: { queryResult, autoSaveProps },\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} autoSaveProps={autoSaveProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Edit>\n  );\n};\n'.trim(),te='\nimport { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductCreate = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Create>\n  );\n};\n'.trim();function re(){return r.createElement(a.x,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","react-router":"latest","react-router-dom":"^6.8.1"},startRoute:"/login",files:{"/App.tsx":{code:ae,hidden:!0},"/pages/products.tsx":{code:ie,hidden:!0},"/pages/login.tsx":{code:se,active:!0},"/pages/register.tsx":{code:de},"/pages/forgot-password.tsx":{code:le},"/pages/reset-password.tsx":{code:ue},"/auth-provider.tsx":{code:oe,hidden:!0}}})}const oe='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),ae='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    AuthPage\n} from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router-dom";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList } from "./pages/products";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <MantineProvider\n                theme={RefineThemes.Blue}\n                withNormalizeCSS\n                withGlobalStyles\n            >\n                <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n                <NotificationsProvider position="top-right">\n                    <Refine\n                        notificationProvider={notificationProvider}\n                        routerProvider={routerProvider}\n                        dataProvider={dataProvider(\n                            "https://api.fake-rest.refine.dev",\n                        )}\n                        authProvider={authProvider}\n                        resources={[\n                            {\n                                name: "products",\n                                list: "/products",\n                            },\n                        ]}\n                    >\n                        <Routes>\n                            <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                              <Route\n                                  element={\n                                      <ThemedLayoutV2>\n                                          <Outlet />\n                                      </ThemedLayoutV2>\n                                  }\n                              >\n                                  <Route index element={<NavigateToResource resource="products" />} />\n                                  <Route path="/products" element={<ProductList />} />\n                                  <Route path="*" element={<ErrorComponent />} />\n                              </Route>\n                            </Route>\n                            <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                                <Route\n                                    path="/login"\n                                    element={(\n                                    <AuthPage\n                                        type="login"\n                                        formProps={{\n                                        initialValues: {\n                                            email: "demo@refine.dev",\n                                            password: "demodemo",\n                                        },\n                                        }}\n                                    />\n                                    )}\n                                />\n                                <Route path="/register" element={<AuthPage type="register" />} />\n                                <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                                <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                        </Routes>\n                    </Refine>\n                </NotificationsProvider>\n            </MantineProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),ie='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Table, Pagination } from "@mantine/core";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n              id: "material",\n              header: "Material",\n              accessorKey: "material",\n          },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            }\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <ScrollArea>\n            <List>\n                <Table highlightOnHover>\n                    <thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <th key={header.id}>\n                                        {flexRender(\n                                            header.column.columnDef\n                                                .header,\n                                            header.getContext(),\n                                        )}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody>\n                        {getRowModel().rows.map((row) => (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <br />\n                <Pagination\n                    position="right"\n                    total={pageCount}\n                    page={current}\n                    onChange={setCurrent}\n                />\n            </List>\n        </ScrollArea>\n    );\n};\n'.trim(),se='\nimport { AuthPage } from "@refinedev/mantine";\n\nexport const LoginPage = () => {\n    return (\n        <AuthPage\n            type="login"\n            formProps={{\n                initialValues: {\n                  email: "demo@refine.dev",\n                  password: "demodemo",\n                },\n            }}\n        />\n    );\n};\n'.trim(),de='\nimport { AuthPage } from "@refinedev/mantine";\n\nexport const RegisterPage = () => {\n    return <AuthPage type="register" />;\n};\n'.trim(),le='\nimport { AuthPage } from "@refinedev/mantine";\n\nexport const ForgotPasswordPage = () => {\n    return <AuthPage type="forgotPassword" />;\n};\n'.trim(),ue='\nimport { AuthPage } from "@refinedev/mantine";\n\nexport const ResetPasswordPage = () => {\n    return <AuthPage type="resetPassword" />;\n};\n'.trim();function ce(){return r.createElement(a.x,{showNavigator:!0,layout:"col",height:320,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons":"^1.119.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","react-router":"latest","react-router-dom":"^6.8.1"},startRoute:"/products",files:{"/App.tsx":{code:he,hidden:!0},"/theme-provider.tsx":{code:fe,active:!0},"/pages/products/index.tsx":{code:pe,hidden:!0},"/pages/products/list.tsx":{code:ge,hidden:!0},"/pages/products/show.tsx":{code:ve,hidden:!0},"/pages/products/edit.tsx":{code:be,hidden:!0},"/pages/products/create.tsx":{code:Pe,hidden:!0},"/auth-provider.tsx":{code:me,hidden:!0}}})}const me='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),pe='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),fe='\nimport { RefineThemes } from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\n\nexport const ThemeProvider = ({ children }) => (\n    <MantineProvider\n        // Available themes: Blue, Purple, Magenta, Red, Orange, Yellow, Green\n        // Change the line below to change the theme\n        theme={RefineThemes.Magenta}\n        withNormalizeCSS\n        withGlobalStyles\n    >\n        <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n        <NotificationsProvider position="top-right">\n            {children}\n        </NotificationsProvider>\n    </MantineProvider>\n);\n'.trim(),he='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    notificationProvider,\n    AuthPage\n} from "@refinedev/mantine";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router-dom";\n\nimport authProvider from "./auth-provider";\n\nimport { ThemeProvider } from "./theme-provider";\n\nimport { ProductList, ProductCreate, ProductEdit, ProductShow } from "./pages/products";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ThemeProvider>\n                <Refine\n                    notificationProvider={notificationProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    authProvider={authProvider}\n                    resources={[\n                        {\n                            name: "products",\n                            list: "/products",\n                            show: "/products/:id",\n                            edit: "/products/:id/edit",\n                            create: "/products/create",\n                            meta: {\n                                canDelete: true,\n                            },\n                        },\n                    ]}\n                >\n                    <Routes>\n                        <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                        <Route\n                            element={\n                                <ThemedLayoutV2>\n                                    <Outlet />\n                                </ThemedLayoutV2>\n                            }\n                        >\n                            <Route index element={<NavigateToResource resource="products" />} />\n                            <Route path="/products" element={<Outlet />}>\n                                <Route index element={<ProductList />} />\n                                <Route path="create" element={<ProductCreate />} />\n                                <Route path=":id" element={<ProductShow />} />\n                                <Route path=":id/edit" element={<ProductEdit />} />\n                            </Route>\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                        </Route>\n                        <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                            <Route\n                                path="/login"\n                                element={(\n                                <AuthPage\n                                    type="login"\n                                    formProps={{\n                                    initialValues: {\n                                        email: "demo@refine.dev",\n                                        password: "demodemo",\n                                    },\n                                    }}\n                                />\n                                )}\n                            />\n                            <Route path="/register" element={<AuthPage type="register" />} />\n                            <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                            <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ThemeProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),ge='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, ShowButton, EditButton, DeleteButton } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n              id: "material",\n              header: "Material",\n              accessorKey: "material",\n          },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <Group spacing="xs" noWrap>\n                            <ShowButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                recordItemId={getValue() as number}\n                            />\n                        </Group>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <ScrollArea>\n            <List>\n                <Table highlightOnHover>\n                    <thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <th key={header.id}>\n                                        {flexRender(\n                                            header.column.columnDef\n                                                .header,\n                                            header.getContext(),\n                                        )}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody>\n                        {getRowModel().rows.map((row) => (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <br />\n                <Pagination\n                    position="right"\n                    total={pageCount}\n                    page={current}\n                    onChange={setCurrent}\n                />\n            </List>\n        </ScrollArea>\n    );\n};\n'.trim(),ve='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/mantine";\n\nimport { Title } from "@mantine/core";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Title order={5}>Id</Title>\n            <TextField value={record?.id} />\n\n            <Title mt="xs" order={5}>Name</Title>\n            <TextField value={record?.name} />\n\n            <Title mt="xs" order={5}>Material</Title>\n            <TextField value={record?.material} />\n\n            <Title mt="xs" order={5}>Description</Title>\n            <MarkdownField value={record?.description} />\n\n            <Title mt="xs" order={5}>Price</Title>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),be='\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductEdit = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n      refineCore: { queryResult, autoSaveProps },\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} autoSaveProps={autoSaveProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Edit>\n  );\n};\n'.trim(),Pe='\nimport { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductCreate = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n          price: 0,\n        },\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <NumberInput\n          mt={8}\n          id="price"\n          label="Price"\n          placeholder="Price"\n          {...getInputProps("price")}\n        />\n      </form>\n    </Create>\n  );\n};\n'.trim();function ye(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function xe(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function we(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const ke={title:"Introduction"},Re=void 0,Te={unversionedId:"ui-integrations/mantine/introduction/index",id:"ui-integrations/mantine/introduction/index",title:"Introduction",description:"Refine provides an integration package for Mantine library. This package provides a set of ready to use components and hooks that connects Refine with Mantine components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Mantine UI packages, you will be able to use all the features of Mantine in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Mantine components in combination with Refine's features and functionalities.",source:"@site/docs/ui-integrations/mantine/introduction/index.md",sourceDirName:"ui-integrations/mantine/introduction",slug:"/ui-integrations/mantine/introduction/",permalink:"/docs/ui-integrations/mantine/introduction/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/ui-integrations/mantine/introduction/index.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1704874672,formattedLastUpdatedAt:"Jan 10, 2024",frontMatter:{title:"Introduction"},sidebar:"mainSidebar",previous:{title:"Theming",permalink:"/docs/ui-integrations/chakra-ui/theming/"},next:{title:"<ThemedLayout />",permalink:"/docs/ui-integrations/mantine/components/themed-layout/"}},Ne={},Ce=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Tables",id:"tables",level:2},{value:"Forms",id:"forms",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Predefined Components and Views",id:"predefined-components-and-views",level:2},{value:"Layouts, Menus and Breadcrumbs",id:"layouts-menus-and-breadcrumbs",level:3},{value:"Buttons",id:"buttons",level:3},{value:"Views",id:"views",level:3},{value:"Fields",id:"fields",level:3},{value:"Auth Pages",id:"auth-pages",level:3},{value:"Error Components",id:"error-components",level:3},{value:"Theming",id:"theming",level:2},{value:"Inferencer",id:"inferencer",level:2}],Se=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},Ie=Se("InstallPackagesCommand"),Me=Se("Tabs"),Le=Se("TabItem"),Be={toc:Ce};function Ae(e){var{components:n}=e,t=we(e,["components"]);return(0,o.kt)("wrapper",xe(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){ye(e,n,t[n])}))}return e}({},Be,t),{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Refine provides an integration package for ",(0,o.kt)("a",{parentName:"p",href:"https://mantine.dev"},"Mantine")," library. This package provides a set of ready to use components and hooks that connects Refine with Mantine components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Mantine UI packages, you will be able to use all the features of Mantine in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Mantine components in combination with Refine's features and functionalities."),(0,o.kt)(i,{mdxType:"Example"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Installing the package is as simple as just by running the following command without any additional configuration:"),(0,o.kt)(Ie,{args:"@refinedev/mantine @refinedev/react-table @mantine/core@5 @mantine/hooks@5 @mantine/form@5 @mantine/notifications@5 @emotion/react@11 @tabler/icons@1 @tanstack/react-table",mdxType:"InstallPackagesCommand"}),(0,o.kt)("admonition",{title:"Version Support",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Refine's Mantine integration currently uses Mantine v5.")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"We'll wrap our app with the ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/theming/mantine-provider/"},(0,o.kt)("inlineCode",{parentName:"a"},"<MantineProvider />"))," to make sure we have the theme available for our app, then we'll use the layout components to wrap them around our routes. Check out the examples below to see how to use Refine's Mantine integration."),(0,o.kt)(Me,{wrapContent:!1,mdxType:"Tabs"},(0,o.kt)(Le,{value:"react-router-dom",label:"React Router v6",mdxType:"TabItem"},(0,o.kt)(f,{mdxType:"UsageReactRouterDom"})),(0,o.kt)(Le,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.kt)(w,{mdxType:"UsageNextJs"})),(0,o.kt)(Le,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.kt)(M,{mdxType:"UsageRemix"}))),(0,o.kt)("h2",{id:"tables"},"Tables"),(0,o.kt)("p",null,"Mantine offers styled ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/core/table/"},"table primitives")," but lacks the table management solution. Refine recommends using ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.kt)("inlineCode",{parentName:"a"},"@refinedev/react-table"))," package which is built on top of Refine's ",(0,o.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,o.kt)("inlineCode",{parentName:"a"},"useTable"))," hook and Tanstack Table's ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/adapters/react-table"},(0,o.kt)("inlineCode",{parentName:"a"},"useTable"))," hook to enable features from pagination to sorting and filtering. Refine's documentations and examples of Mantine uses ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/react-table")," package for table management but you have the option to use any table management solution you want."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'import React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, ShowButton, EditButton, DeleteButton } from "@refinedev/mantine";\n\nimport { Box, Group, ScrollArea, Select, Table, Pagination } from "@mantine/core";\n\nconst columns = [\n  { id: "id", header: "ID", accessorKey: "id" },\n  { id: "name", header: "Name", accessorKey: "name", meta: { filterOperator: "contains" } },\n  { id: "price", header: "Price", accessorKey: "price" },\n  {\n    id: "actions",\n    header: "Actions",\n    accessorKey: "id",\n    enableColumnFilter: false,\n    enableSorting: false,\n    cell: function render({ getValue }) {\n      return (\n        <Group spacing="xs" noWrap>\n          <ShowButton hideText recordItemId={getValue() as number} />\n          <EditButton hideText recordItemId={getValue() as number} />\n          <DeleteButton hideText recordItemId={getValue() as number} />\n        </Group>\n      );\n    },\n  },\n];\n\nexport const ProductList = () => {\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQueryResult: { data: tableData },\n    },\n  } = useTable<IProduct>({ columns });\n\n  return (\n    <ScrollArea>\n      <List>\n        <Table highlightOnHover>\n          <thead>\n            {getHeaderGroups().map((headerGroup) => (\n              <tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <th key={header.id}>{flexRender(header.column.columnDef.header, header.getContext())}</th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody>\n            {getRowModel().rows.map((row) => (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell) => (\n                  <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <br />\n        <Pagination position="right" total={pageCount} page={current} onChange={setCurrent} />\n      </List>\n    </ScrollArea>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n')),(0,o.kt)("h2",{id:"forms"},"Forms"),(0,o.kt)("p",null,"Refine provides a seamless integration with the ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/form/use-form/"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," hook of ",(0,o.kt)("inlineCode",{parentName:"p"},"@mantine/form")," from validation to submission via the ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," hook exported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/create.tsx"',title:'"pages/products/create.tsx"'},'import { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, NumberInput } from "@mantine/core";\n\nexport const ProductCreate = () => {\n  // highlight-start\n  const { saveButtonProps, getInputProps, errors } = useForm({\n    initialValues: {\n      name: "",\n      material: "",\n      price: 0,\n    },\n  });\n  // highlight-end\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput mt={8} id="name" label="Name" placeholder="Name" {...getInputProps("name")} />\n        <TextInput mt={8} id="material" label="Material" placeholder="Material" {...getInputProps("material")} />\n        <NumberInput mt={8} id="price" label="Price" placeholder="Price" {...getInputProps("price")} />\n      </form>\n    </Create>\n  );\n};\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," also offers hooks to implement different types of forms such as ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-modal-form"},(0,o.kt)("inlineCode",{parentName:"a"},"useModalForm")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-drawer-form"},(0,o.kt)("inlineCode",{parentName:"a"},"useDrawerForm"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-steps-form"},(0,o.kt)("inlineCode",{parentName:"a"},"useStepsForm"))," hooks. Additionally ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-select"},(0,o.kt)("inlineCode",{parentName:"a"},"useSelect"))," hook is also provided to make it easier to implement form fields with relational data. The ",(0,o.kt)("inlineCode",{parentName:"p"},"useSelect")," hook of ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," leverage the ",(0,o.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-select"},(0,o.kt)("inlineCode",{parentName:"a"},"useSelect"))," hook from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/core")," package."),(0,o.kt)("h2",{id:"notifications"},"Notifications"),(0,o.kt)("p",null,"Mantine has its own built-in notification system through ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/others/notifications/"},(0,o.kt)("inlineCode",{parentName:"a"},"@mantine/notifications"))," package which works seamlessly with its UI elements. Refine also provides a seamless integration with Mantine's notification system and show notifications for related actions and events. This integration is provided by the ",(0,o.kt)("inlineCode",{parentName:"p"},"notificationProvider")," hook exported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package which can be directly used in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/refine-component#notificationprovider"},(0,o.kt)("inlineCode",{parentName:"a"},"notificationProvider"))," prop of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { Refine } from "@refinedev/core";\nimport { notificationProvider } from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\n\nconst App = () => {\n  return (\n    // `@mantine/notifications` also requires a context provider to be used\n    <NotificationsProvider position="top-right">\n      <Refine notificationProvider={notificationProvider}>{/* ... */}</Refine>\n    </NotificationsProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"predefined-components-and-views"},"Predefined Components and Views"),(0,o.kt)("h3",{id:"layouts-menus-and-breadcrumbs"},"Layouts, Menus and Breadcrumbs"),(0,o.kt)("p",null,"Refine provides Layout components that can be used to implement a layout for the application. These components are crafted using Mantine's components and includes Refine's features and functionalities such as navigation menus, headers, authentication, authorization and more."),(0,o.kt)(Me,{wrapContent:!1,mdxType:"Tabs"},(0,o.kt)(Le,{value:"react-router-dom",label:"React Router v6",mdxType:"TabItem"},(0,o.kt)(K,{mdxType:"LayoutReactRouterDom"})),(0,o.kt)(Le,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.kt)(z,{mdxType:"LayoutNextJs"})),(0,o.kt)(Le,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.kt)(W,{mdxType:"LayoutRemix"}))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/themed-layout"},(0,o.kt)("inlineCode",{parentName:"a"},"<ThemedLayoutV2 />"))," component consists of a header, sider and a content area. The sider have a navigation menu items for the defined resources of Refine, if an authentication provider is present, it will also have a functional logout buttun. The header contains the app logo and name and also information about the current user if an authentication provider is present."),(0,o.kt)("p",null,"Additionally, Refine also provides a ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/breadcrumb"},(0,o.kt)("inlineCode",{parentName:"a"},"<Breadcrumb />"))," component that uses the Mantine's component as a base and provide appropriate breadcrumbs for the current route. This component is used in the basic views provided by Refine's Mantine package automatically."),(0,o.kt)("h3",{id:"buttons"},"Buttons"),(0,o.kt)("p",null,"Refine's Mantine integration offers variety of buttons that are built above the ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/core/button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Button />"))," component of Mantine and includes many logical functionalities such as;"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Authorization checks"),(0,o.kt)("li",{parentName:"ul"},"Confirmation dialogs"),(0,o.kt)("li",{parentName:"ul"},"Loading states"),(0,o.kt)("li",{parentName:"ul"},"Invalidation"),(0,o.kt)("li",{parentName:"ul"},"Navigation"),(0,o.kt)("li",{parentName:"ul"},"Form actions"),(0,o.kt)("li",{parentName:"ul"},"Import/Export and more.")),(0,o.kt)("p",null,"You can use buttons such as ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/edit-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton />"))," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/list-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton />"))," etc. in your views to provide navigation for the related routes or ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/delete-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton />"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/save-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<SaveButton />"))," etc. to perform related actions without having to worry about the authorization checks and other logical functionalities."),(0,o.kt)("p",null,"An example usage of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<EditButton />")," component is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'import React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { List, EditButton } from "@refinedev/mantine";\n\nconst columns = [\n  { id: "id", header: "ID", accessorKey: "id" },\n  { id: "name", header: "Name", accessorKey: "name", meta: { filterOperator: "contains" } },\n  { id: "price", header: "Price", accessorKey: "price" },\n  {\n    id: "actions",\n    header: "Actions",\n    accessorKey: "id",\n    cell: function render({ getValue }) {\n      // highlight-next-line\n      return <EditButton hideText recordItemId={getValue() as number} />;\n    },\n  },\n];\n\nexport const ProductList = () => {\n  const table = useTable({ columns });\n\n  return ( /* ... */ );\n};\n')),(0,o.kt)("p",null,"The list of provided buttons are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/create-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<CreateButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/edit-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/list-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/show-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ShowButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/clone-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<CloneButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/delete-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/save-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<SaveButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/refresh-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefreshButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/import-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ImportButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/buttons/export-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ExportButton />")))),(0,o.kt)("p",null,"Many of these buttons are already used in the views provided by Refine's Mantine integration. If you're using the basic view elements provided by Refine, you will have the appropriate buttons placed in your application out of the box."),(0,o.kt)("h3",{id:"views"},"Views"),(0,o.kt)("p",null,"Views are designed as wrappers around the content of the pages in the application. They are designed to be used within the layouts and provide basic functionalities such as titles based on the resource, breadcrumbs, related actions and authorization checks. Refine's Mantine integration uses components such as ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/core/box/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Box />")),", ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/core/card/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Card />"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/core/group/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Group />"))," to provide these views and provides customization options by passing related props to these components."),(0,o.kt)("p",null,"The list of provided views are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/basic-views/list"},(0,o.kt)("inlineCode",{parentName:"a"},"<List />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/basic-views/show"},(0,o.kt)("inlineCode",{parentName:"a"},"<Show />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/basic-views/edit"},(0,o.kt)("inlineCode",{parentName:"a"},"<Edit />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/basic-views/create"},(0,o.kt)("inlineCode",{parentName:"a"},"<Create />")))),(0,o.kt)(Z,{mdxType:"BasicViews"}),(0,o.kt)("h3",{id:"fields"},"Fields"),(0,o.kt)("p",null,"Refine's Mantine also provides field components to render values with appropriate design and format of Mantine. These components are built on top of respective Mantine components and also provide logic for formatting of the values. While these components might not always be suitable for your use case, they can be combined or extended to provide the desired functionality."),(0,o.kt)("p",null,"The list of provided field components are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/boolean-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<BooleanField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/date-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<DateField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/email-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<EmailField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/file-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<FileField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/markdown-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<MarkdownField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/number-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<NumberField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/tag-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<TagField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/text-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<TextField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/components/fields/url-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<UrlField />")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/show.tsx"',title:'"pages/products/show.tsx"'},'import { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/mantine";\n\nimport { Title } from "@mantine/core";\n\nexport const ProductShow = () => {\n  const { queryResult } = useShow();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title mt="xs" order={5}>\n        Name\n      </Title>\n      {/* highlight-next-line */}\n      <TextField value={record?.name} />\n\n      <Title mt="xs" order={5}>\n        Description\n      </Title>\n      {/* highlight-next-line */}\n      <MarkdownField value={record?.description} />\n\n      <Title mt="xs" order={5}>\n        Price\n      </Title>\n      {/* highlight-next-line */}\n      <NumberField value={record?.price} options={{ style: "currency", currency: "USD" }} />\n    </Show>\n  );\n};\n')),(0,o.kt)("h3",{id:"auth-pages"},"Auth Pages"),(0,o.kt)("p",null,"Auth pages are designed to be used as the pages of the authentication flow of the application. They offer an out of the box solution for the login, register, forgot password and reset password pages by leveraging the authentication hooks of Refine. Auth page components are built on top of basic Mantine components such as ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/core/text-input/"},(0,o.kt)("inlineCode",{parentName:"a"},"<TextInput />"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/core/card/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Card />"))," etc."),(0,o.kt)("p",null,"The list of types of auth pages that are available in the UI integrations are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="login" />')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="register" />')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="forgot-password" />')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="reset-password" />'))),(0,o.kt)("p",null,"An example usage of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/auth-page"},(0,o.kt)("inlineCode",{parentName:"a"},"<AuthPage />"))," component is as follows:"),(0,o.kt)(re,{mdxType:"AuthPage"}),(0,o.kt)("h3",{id:"error-components"},"Error Components"),(0,o.kt)("p",null,"Refine's Mantine integration also provides an ",(0,o.kt)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component that you can use to render a 404 page in your app. While these components does not offer much functionality, they are provided as an easy way to render an error page with a consistent design language."),(0,o.kt)("p",null,"An example usage of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/404.tsx"',title:'"pages/404.tsx"'},'import { ErrorComponent } from "@refinedev/mantine";\n\nconst NotFoundPage = () => {\n  return <ErrorComponent />;\n};\n')),(0,o.kt)("h2",{id:"theming"},"Theming"),(0,o.kt)("p",null,"Since Refine offers application level components such as layout, sidebar and header and page level components for each action, it is important to have it working with the styling of Mantine. All components and providers exported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package will use the current theme of Mantine without any additional configuration."),(0,o.kt)("p",null,"Additionally, Refine also provides a set of carefully crafted themes for Mantine which outputs a nice UI with Refine's components with light and dark theme support. These themes are exported as ",(0,o.kt)("inlineCode",{parentName:"p"},"RefineThemes")," object from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package and can be used in ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/theming/mantine-provider/"},(0,o.kt)("inlineCode",{parentName:"a"},"<MantineProvider />"))," component of Mantine."),(0,o.kt)(ce,{mdxType:"Theming"}),(0,o.kt)("p",null,"To learn more about the theme configuration of Mantine, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://v5.mantine.dev/theming/theme-object/"},"official documentation"),"."),(0,o.kt)("h2",{id:"inferencer"},"Inferencer"),(0,o.kt)("p",null,"You can automatically generate views for your resources using ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/inferencer"),". Inferencer exports the ",(0,o.kt)("inlineCode",{parentName:"p"},"MantineListInferencer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"MantineShowInferencer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"MantineEditInferencer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"MantineCreateInferencer")," components and finally the ",(0,o.kt)("inlineCode",{parentName:"p"},"MantineInferencer")," component, which combines all in one place."),(0,o.kt)("p",null,"To learn more about Inferencer, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/inferencer"},"Material UI Inferencer")," docs."))}Ae.isMDXComponent=!0}}]);