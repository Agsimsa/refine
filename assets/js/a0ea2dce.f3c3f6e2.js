"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[35846],{58943:(e,t,n)=>{n.d(t,{x:()=>m});var r=n(86010),o=n(67294),a=n(73808),i=n(96319),s=n(79526);const l=({horizontalSize:e,onMouseDown:t})=>o.createElement("div",{className:(0,r.Z)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:t,style:{left:`calc(${e}% - 5px)`}});function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){d(e,t,n[t])}))}return e}function c(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const m=e=>{var t;return"nextjs"===(null===(t=e)||void 0===t?void 0:t.template)?o.createElement(f,e):o.createElement(h,e)},h=e=>{var t,n,d,m,h,f,g,v,y,w,P,b,R,C,A,{startRoute:k,showNavigator:T,showLineNumbers:I,showOpenInCodeSandbox:x,initialPercentage:N=50,dependencies:O,options:S={showTabs:!0,initMode:"lazy",classes:{"sp-cm":"p-0 bg-transparent"}},template:E="react-ts",customSetup:F,files:L,previewOnly:B,layout:D,height:U=420,wrapperClassName:j,className:M,showFiles:z=!1,showConsole:V=!1,hidePreview:q=!1}=e,W=p(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const{colorMode:_}=(0,s.I)();var $,H;null!=S||(S={}),null!==($=(C=S).resizablePanels)&&void 0!==$||(C.resizablePanels=!0),null!==(H=(A=S).editorWidthPercentage)&&void 0!==H||(A.editorWidthPercentage=null!=N?N:50);const G={showTabs:S.showTabs,showLineNumbers:S.showLineNumbers,showInlineErrors:S.showInlineErrors,wrapContent:S.wrapContent,closableTabs:S.closableTabs,initMode:S.initMode,extensions:null===(t=S.codeEditor)||void 0===t?void 0:t.extensions,extensionsKeymap:null===(n=S.codeEditor)||void 0===n?void 0:n.extensionsKeymap,readOnly:S.readOnly,showReadOnly:S.showReadOnly,additionalLanguages:null===(d=S.codeEditor)||void 0===d?void 0:d.additionalLanguages},Z={activeFile:S.activeFile,visibleFiles:S.visibleFiles,recompileMode:S.recompileMode,recompileDelay:S.recompileDelay,autorun:S.autorun,autoReload:S.autoReload,bundlerURL:S.bundlerURL,startRoute:S.startRoute,skipEval:S.skipEval,fileResolver:S.fileResolver,initMode:S.initMode,initModeObserverOptions:S.initModeObserverOptions,externalResources:S.externalResources,logLevel:S.logLevel,classes:S.classes},[X,J]=o.useState(!1),{onHandleMouseDown:K,horizontalSize:Y}=(({initialSize:e=50})=>{const[t,n]=o.useState(e),r=o.useRef(null),a=e=>{if(!r.current)return;const t=r.current.parentElement;if(!t)return;const{left:o,width:a}=t.getBoundingClientRect(),i=(e.clientX-o)/a*100,s=Math.min(Math.max(i,25),75);n(s),t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const t=null===(e=r.current)||void 0===e?void 0:e.parentElement;t&&(t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:t,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:S.editorWidthPercentage}),Q=!B&&!(null===(h=D)||void 0===h||null===(m=h.includes)||void 0===m?void 0:m.call(h,"col"));var ee,te,ne,re,oe,ae;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.Z)("pb-6",j)},o.createElement("div",{className:(0,r.Z)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",M)},o.createElement(i.oT,u({key:E,customSetup:u({dependencies:O},F),files:L,options:Z,template:E,theme:"light"===_?c(u({},i.dN),{colors:c(u({},i.dN.colors),{surface1:"#F4F8FB",surface2:"rgb(222, 229, 237)",surface3:"rgb(222, 229, 237)"})}):c(u({},a.I2),{colors:c(u({},a.I2.colors),{surface1:"#1D1E30",surface2:"#303450",surface3:"#303450"})}),className:(0,r.Z)("not-prose sandpack-container","max-w-screen-xl")},W),o.createElement(i.sp,{className:(0,r.Z)("col"===D&&"!flex-col","col-reverse"===D&&"!flex-col-reverse")},z&&o.createElement(i.Lj,{autoHiddenFiles:!0,style:{height:null!==(ee=S.editorHeight)&&void 0!==ee?ee:U}}),!B&&o.createElement(i._V,c(u({},G),{showLineNumbers:I,closableTabs:z,initMode:"lazy",style:c(u({height:null!==(te=S.editorHeight)&&void 0!==te?te:U},(null===(g=D)||void 0===g||null===(f=g.includes)||void 0===f?void 0:f.call(g,"col"))?{flex:"initial"}:{flexGrow:Y,flexShrink:Y,flexBasis:0}),{overflow:"hidden"})})),V?o.createElement(i.Tq,{style:c(u({height:null!==(ne=S.editorHeight)&&void 0!==ne?ne:U},(null===(y=D)||void 0===y||null===(v=y.includes)||void 0===v?void 0:v.call(y,"col"))?{flex:"initial"}:{flexGrow:Y,flexShrink:Y,flexBasis:0}),{overflow:"hidden"})}):null,Q?o.createElement(l,{onMouseDown:K,horizontalSize:Y}):null,q?null:o.createElement(o.Fragment,null,o.createElement(i.Gj,{showOpenInCodeSandbox:x,startRoute:k,showNavigator:null!=T?T:S.showNavigator,showRefreshButton:S.showRefreshButton,style:c(u({display:q?"none":"flex"},(null===(P=D)||void 0===P||null===(w=P.includes)||void 0===w?void 0:w.call(P,"col"))?{flex:"initial",width:"100%"}:{flexGrow:100-Y,flexShrink:100-Y,flexBasis:0,width:B?"100%":100-Y+"%"}),{gap:0,height:null!==(re=S.editorHeight)&&void 0!==re?re:U})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.Z)("w-12","h-12","rounded-full")}))))))),o.createElement("div",{className:(0,r.Z)(""),style:{height:Number(null!==(oe=S.editorHeight)&&void 0!==oe?oe:U)+2}}),o.createElement("div",{className:(0,r.Z)((null===(R=D)||void 0===R||null===(b=R.includes)||void 0===b?void 0:b.call(R,"col"))?"block":"block md:hidden"),style:{height:Number(null!==(ae=S.editorHeight)&&void 0!==ae?ae:U)+2}})),o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("p",null,`Dependencies: ${Object.keys(null!=O?O:{}).map((e=>`${e}@${O[e]}`))}`),o.createElement("h3",null,"Code Files"),Object.keys(null!=L?L:{}).map((e=>o.createElement("div",{key:e},o.createElement("div",null,`File: ${e}`),o.createElement("div",null,`Content: ${"code"in L[e]?L[e].code:L[e]}`))))))},f=e=>{const t={hidePreview:!0};return o.createElement(h,c(u({},e,t),{template:"react-ts"}))};'\nimport { NavigateToResource } from "@refinedev/nextjs-router";\n\nconst Home = () => {\n    return <NavigateToResource resource="products" />;\n};\n\nexport default Home;\n'.trim()},23542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>h,default:()=>C,frontMatter:()=>m,metadata:()=>f,toc:()=>v});var r=n(67294),o=n(3905),a=n(58943);function i(){return r.createElement(a.x,{hidePreview:!0,showFiles:!0,showOpenInCodeSandbox:!1,template:"react-ts",dependencies:{"@refinedev/core":"latest","@refinedev/appwrite":"latest"},files:{"src/appwrite.ts":{active:!0,code:s},"src/auth-provider.ts":{code:l},"App.tsx":{code:d}}})}const s='\nimport { Appwrite, Account, Storage } from "@refinedev/appwrite";\n\nconst APPWRITE_URL = "<APPWRITE_ENDPOINT>";\nconst APPWRITE_PROJECT = "<APPWRITE_PROJECT_ID>";\n\n/**\n * We\'ll use the `appwriteClient` instance\n * in our `dataProvider`, `liveProvider` and `authProvider`.\n */\nconst appwriteClient = new Appwrite();\n\nappwriteClient.setEndpoint(APPWRITE_URL).setProject(APPWRITE_PROJECT);\n\n// for authentication\nconst account = new Account(appwriteClient);\n// for file upload\nconst storage = new Storage(appwriteClient);\n\nexport { appwriteClient, account, storage };\n'.trim(),l='\nimport { AuthBindings } from "@refinedev/core";\n\nimport { account } from "./appwriteClient";\n\n/**\n * We\'ll use the `account` instance to handle authentication.\n * This will be in sync with our appwrite client.\n */\n\nconst authProvider: AuthBindings = {\n  login: async ({ email, password }) => {\n    try {\n      await account.createEmailSession(email, password);\n      return {\n        success: true,\n        redirectTo: "/",\n      };\n    } catch (e) {\n      const { type, message, code } = e as AppwriteException;\n      return {\n        success: false,\n        error: {\n          message,\n          name: `${code} - ${type}`,\n        },\n      };\n    }\n  },\n  logout: async () => {\n    try {\n      await account.deleteSession("current");\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      };\n    }\n\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  check: async () => {\n    try {\n      const session = await account.get();\n\n      if (session) {\n        return {\n          authenticated: true,\n        };\n      }\n    } catch (error: any) {\n      return {\n        authenticated: false,\n        error: error,\n        logout: true,\n        redirectTo: "/login",\n      };\n    }\n\n    return {\n      authenticated: false,\n      error: {\n        message: "Check failed",\n        name: "Session not found",\n      },\n      logout: true,\n      redirectTo: "/login",\n    };\n  },\n  getPermissions: async () => null,\n  getIdentity: async () => {\n    const user = await account.get();\n\n    if (user) {\n      return user;\n    }\n\n    return null;\n  },\n};\n'.trim(),d='\nimport { Refine } from "@refinedev/core";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\n\nimport { appwriteClient, account } from "src/appwrite";\nimport authProvider from "src/auth-provider";\n\nconst App: React.FC = () => {\n  return (\n      <Refine\n        // `appwriteClient` is passed to the `dataProvider` and `liveProvider`\n        dataProvider={dataProvider(appwriteClient, {\n          databaseId: "default",\n        })}\n        // If you want to use the realtime features of Refine, you can pass the `liveProvider` prop.\n        liveProvider={liveProvider(appwriteClient, {\n          databaseId: "default",\n        })}\n        options={{ liveMode: "auto" }}\n        authProvider={authProvider}\n      >\n        {/* ... */}\n      </Refine>\n  );\n};\n'.trim();function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const m={title:"Appwrite",source:"https://github.com/refinedev/refine/tree/master/packages/appwrite",swizzle:!0},h=void 0,f={unversionedId:"packages/data-providers/appwrite/index",id:"packages/data-providers/appwrite/index",title:"Appwrite",description:"Refine provides a data provider for Appwrite, a backend as a service platform, to build CRUD applications.",source:"@site/docs/packages/data-providers/appwrite/index.md",sourceDirName:"packages/data-providers/appwrite",slug:"/packages/data-providers/appwrite/",permalink:"/docs/packages/data-providers/appwrite/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/packages/data-providers/appwrite/index.md",tags:[],version:"current",lastUpdatedBy:"Necati \xd6zmen",lastUpdatedAt:1702477703,formattedLastUpdatedAt:"Dec 13, 2023",frontMatter:{title:"Appwrite",source:"https://github.com/refinedev/refine/tree/master/packages/appwrite",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Command Palette",permalink:"/docs/packages/command-palette/"},next:{title:"GraphQL",permalink:"/docs/packages/data-providers/graphql/"}},g={},v=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Create Collections",id:"create-collections",level:2},{value:"Permissions",id:"permissions",level:3},{value:"Login page\u200b",id:"login-page",level:2},{value:"List Page",id:"list-page",level:2},{value:"Create Page",id:"create-page",level:2},{value:"Edit Page",id:"edit-page",level:2},{value:"Example",id:"example",level:2}],y=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},w=y("Tabs"),P=y("TabItem"),b=y("CodeSandboxExample"),R={toc:v};function C(e){var{components:t}=e,n=p(e,["components"]);return(0,o.kt)("wrapper",c(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){u(e,t,n[t])}))}return e}({},R,n),{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import { Appwrite } from "@refinedev/appwrite";\nconst APPWRITE_URL = "https://refine.appwrite.org/v1";\nconst APPWRITE_PROJECT = "61c4368b4e349";\nconst appwriteClient = new Appwrite();\nappwriteClient.setEndpoint(APPWRITE_URL).setProject(APPWRITE_PROJECT);\n\nwindow.__refineAuthStatus = false;\n\nconst authProvider = {\n  login: () => {\n    window.__refineAuthStatus = true;\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  register: async () => {\n    return {\n      success: true,\n    };\n  },\n  forgotPassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  updatePassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  logout: async () => {\n    window.__refineAuthStatus = false;\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  check: async () => {\n    return {\n      authenticated: window.__refineAuthStatus ? true : false,\n      redirectTo: window.__refineAuthStatus ? undefined : "/login",\n    };\n  },\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  getPermissions: async () => null,\n  getIdentity: async () => null,\n};\n\nimport { useMany as CoreUseMany, useShow as RefineCoreUseShow, useOne as RefineCoreUseOne } from "@refinedev/core";\nimport {\n  List as RefineAntdList,\n  TextField as RefineAntdTextField,\n  useTable as RefineAntdUseTable,\n  EditButton as RefineAntdEditButton,\n  ShowButton as RefineAntdShowButton,\n  getDefaultSortOrder as RefineAntdGetDefaultSortOrder,\n  useForm as RefineAntdUseForm,\n  useSelect as RefineAntdUseSelect,\n  Create as RefineAntdCreate,\n  Show as RefineAntdShow,\n} from "@refinedev/antd";\nimport {\n  Table as AntdTable,\n  Space as AntdSpace,\n  Form as AntdForm,\n  Select as AntdSelect,\n  Input as AntdInput,\n  Typography as AntdTypography,\n} from "antd";\n\nconst PostList: React.FC = () => {\n  const { tableProps, sorter } = RefineAntdUseTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: "$id",\n          order: "asc",\n        },\n      ],\n    },\n  });\n\n  const categoryIds = tableProps?.dataSource?.map((item) => item.categoryId) ?? [];\n  const { data, isLoading } = CoreUseMany<ICategory>({\n    resource: "61c43adc284ac",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <RefineAntdList>\n      <AntdTable {...tableProps} rowKey="id">\n        <AntdTable.Column\n          dataIndex="id"\n          title="ID"\n          sorter\n          defaultSortOrder={RefineAntdGetDefaultSortOrder("id", sorter)}\n        />\n        <AntdTable.Column dataIndex="title" title="Title" sorter />\n        <AntdTable.Column\n          dataIndex="categoryId"\n          title="Category"\n          render={(value) => {\n            if (isLoading) {\n              return <RefineAntdTextField value="Loading..." />;\n            }\n\n            return <RefineAntdTextField value={data?.data.find((item) => item.id === value)?.title} />;\n          }}\n        />\n        <AntdTable.Column<IPost>\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <AntdSpace>\n              <RefineAntdEditButton hideText size="small" recordItemId={record.id} />\n              <RefineAntdShowButton hideText size="small" recordItemId={record.id} />\n            </AntdSpace>\n          )}\n        />\n      </AntdTable>\n    </RefineAntdList>\n  );\n};\n\nconst PostCreate: React.FC = () => {\n  const { formProps, saveButtonProps } = RefineAntdUseForm<IPost>();\n\n  const { selectProps: categorySelectProps } = RefineAntdUseSelect<ICategory>({\n    resource: "61bc4afa9ee2c",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <RefineAntdCreate saveButtonProps={saveButtonProps}>\n      <AntdForm {...formProps} layout="vertical">\n        <AntdForm.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdSelect {...categorySelectProps} />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput.TextArea />\n        </AntdForm.Item>\n      </AntdForm>\n    </RefineAntdCreate>\n  );\n};\n\nconst PostEdit: React.FC = () => {\n  const { formProps, saveButtonProps, queryResult } = RefineAntdUseForm<IPost>();\n\n  const postData = queryResult?.data?.data;\n  const { selectProps: categorySelectProps } = RefineAntdUseSelect<ICategory>({\n    defaultValue: postData?.categoryId,\n    resource: "61c43adc284ac",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <RefineAntdCreate saveButtonProps={saveButtonProps}>\n      <AntdForm {...formProps} layout="vertical">\n        <AntdForm.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdSelect {...categorySelectProps} />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput.TextArea />\n        </AntdForm.Item>\n      </AntdForm>\n    </RefineAntdCreate>\n  );\n};\n\nconst PostShow: React.FC = () => {\n  const { queryResult } = RefineCoreUseShow<IPost>();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  const { data: categoryData, isLoading: categoryIsLoading } = RefineCoreUseOne<ICategory>({\n    resource: "categories",\n    id: record?.category?.id || "",\n    queryOptions: {\n      enabled: !!record,\n    },\n  });\n\n  return (\n    <RefineAntdShow isLoading={isLoading}>\n      <AntdTypography.Title level={5}>Id</AntdTypography.Title>\n      <AntdTypography.Text>{record?.id}</AntdTypography.Text>\n\n      <AntdTypography.Title level={5}>AntdTypography.Title</AntdTypography.Title>\n      <AntdTypography.Text>{record?.title}</AntdTypography.Text>\n\n      <AntdTypography.Title level={5}>Category</AntdTypography.Title>\n      <AntdTypography.Text>{categoryIsLoading ? "Loading..." : categoryData?.data.title}</AntdTypography.Text>\n\n      <AntdTypography.Title level={5}>Content</AntdTypography.Title>\n      <AntdTypography.Text>{record?.content}</AntdTypography.Text>\n    </RefineAntdShow>\n  );\n};\n')),(0,o.kt)("p",null,"Refine provides a data provider for ",(0,o.kt)("a",{parentName:"p",href:"https://appwrite.io/"},"Appwrite"),", a backend as a service platform, to build CRUD applications."),(0,o.kt)("admonition",{title:"Good to know",type:"simple"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@refinedev/appwrite")," requires Appwrite version >= 1.0"),(0,o.kt)("li",{parentName:"ul"},"To learn more about data fetching in Refine, check out the ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides-concepts/data-fetching"},"Data Fetching")," guide."),(0,o.kt)("li",{parentName:"ul"},"To learn more about realtime features of Refine, check out the ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides-concepts/realtime"},"Realtime")," guide."),(0,o.kt)("li",{parentName:"ul"},"Example below uses ",(0,o.kt)("inlineCode",{parentName:"li"},"@refinedev/antd")," as the UI library but Refine is UI agnostic and you can use any UI library you want."))),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @refinedev/appwrite\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"First, we'll create our Appwrite client and use it in our ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"authProvider")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"liveProvider"),"."),(0,o.kt)(i,{mdxType:"Usage"}),(0,o.kt)("h2",{id:"create-collections"},"Create Collections"),(0,o.kt)("p",null,"We created two collections on Appwrite Database as ",(0,o.kt)("inlineCode",{parentName:"p"},"posts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"categories")," and added a relation between them."),(0,o.kt)(w,{mdxType:"Tabs"},(0,o.kt)(P,{value:"category",label:"Category Collection",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Category Collection"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Title: text")),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/category.png",alt:"category"})),(0,o.kt)(P,{value:"post",label:"Post Collection",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Post Collection"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Title: text"),(0,o.kt)("li",{parentName:"ul"},"CategoryId: text"),(0,o.kt)("li",{parentName:"ul"},"Content: text"),(0,o.kt)("li",{parentName:"ul"},"Images: wildcard")),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/posts.png",alt:"posts"})),(0,o.kt)(P,{value:"auth",label:"Authentication",mdxType:"TabItem"},(0,o.kt)("p",null,"Then we need to create an appwrite user to be able to login with Refine."),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/user.png",alt:"user"}))),(0,o.kt)("h3",{id:"permissions"},"Permissions"),(0,o.kt)("p",null,"In order to list posts and categories, you need to give read and write permission by Appwrite."),(0,o.kt)("p",null,"Example: ",(0,o.kt)("inlineCode",{parentName:"p"},"Post Collection Permissions")),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/permission.png",alt:"permission"}),(0,o.kt)("br",null),(0,o.kt)("p",null,'We indicate that the read and write permission is open to everyone by giving the "',"*",'" parameter.'),(0,o.kt)("admonition",{title:"Related resources",type:"simple"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Check out Appwrite's ",(0,o.kt)("a",{parentName:"li",href:"https://appwrite.io/docs/permissions"},"Permissions")," documentation for detailed information."),(0,o.kt)("li",{parentName:"ul"},"Check out how you can use permissions when ",(0,o.kt)("a",{parentName:"li",href:"#create-page"},"creating posts")," with Refine"))),(0,o.kt)("h2",{id:"login-page"},"Login page\u200b"),(0,o.kt)("p",null,"Before creating CRUD pages, let's create a login page. For this we use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/auth-page"},(0,o.kt)("inlineCode",{parentName:"a"},"AuthPage"))," component. This component returns ready-to-use authentication pages for ",(0,o.kt)("inlineCode",{parentName:"p"},"login"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"register"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"forgot password")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"update password")," actions."),(0,o.kt)("p",null,"Below we see its implementation in the ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:5173",live:!0,hideCode:!0,url:"http://localhost:5173"},'setInitialRoutes(["/"]);\n// visible-block-start\n// src/App.tsx\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, { CatchAllNavigate, NavigateToResource } from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayoutV2,\n  RefineThemes,\n  notificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={authProvider}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={notificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route index element={<NavigateToResource resource="61c43ad33b857" />} />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            {/* highlight-start */}\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n            {/* highlight-end */}\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("p",null,"Now we can login with the user we created by Appwrite. We can then list, create and edit posts."),(0,o.kt)("h2",{id:"list-page"},"List Page"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"When defining your resources, ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," must match the Appwrite Collection ID. You can change the label with the resource meta."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'export const App = () => (\n  <Refine\n    // ...\n    resources={[\n      {\n        //highlight-start\n        name: "61bc3660648a6",\n        //highlight-end\n        meta: {\n          //highlight-start\n          label: "Post",\n          //highlight-end\n        },\n      },\n    ]}\n  />\n);\n'))),(0,o.kt)("p",null,"Now that we've created our collections, we can create and list documents. Let's list the posts and categories that we have created by Appwrite with Refine."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Show Code"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useMany } from "@refinedev/core";\nimport { List, TextField, useTable, EditButton, ShowButton, getDefaultSortOrder } from "@refinedev/antd";\nimport { Table, Space } from "antd";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostsList: React.FC = () => {\n  const { tableProps, sorter } = useTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: "$id",\n          order: "asc",\n        },\n      ],\n    },\n  });\n\n  const categoryIds = tableProps?.dataSource?.map((item) => item.categoryId) ?? [];\n  const { data, isLoading } = useMany<ICategory>({\n    resource: "61bc4afa9ee2c",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" sorter defaultSortOrder={getDefaultSortOrder("id", sorter)} />\n        <Table.Column dataIndex="title" title="Title" sorter />\n        <Table.Column\n          dataIndex="categoryId"\n          title="Category"\n          render={(value) => {\n            if (isLoading) {\n              return <TextField value="Loading..." />;\n            }\n\n            return <TextField value={data?.data.find((item) => item.id === value)?.title} />;\n          }}\n        />\n        <Table.Column<IPost>\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n')))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173",live:!0,previewOnly:!0,url:"http://localhost:5173"},'setInitialRoutes(["/"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, { CatchAllNavigate, NavigateToResource } from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayoutV2,\n  RefineThemes,\n  notificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={{\n            ...authProvider,\n            check: async () => ({\n              authenticated: true,\n            }),\n          }}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={notificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route index element={<NavigateToResource resource="61c43ad33b857" />} />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\nrender(<App />);\n')),(0,o.kt)("h2",{id:"create-page"},"Create Page"),(0,o.kt)("p",null,"We can now create posts and set categories from our Refine UI."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Show Code"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\n\nimport { Create, useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select, Upload } from "antd";\nimport { RcFile } from "antd/lib/upload/interface";\n\nimport MDEditor from "@uiw/react-md-editor";\n\nimport { IPost, ICategory } from "interfaces";\nimport { storage, normalizeFile } from "utility";\n\nexport const PostsCreate: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm<IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: "61bc4afa9ee2c",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <MDEditor data-color-mode="light" />\n        </Form.Item>\n        <Form.Item label="Images">\n          <Form.Item name="images" valuePropName="fileList" normalize={normalizeFile} noStyle>\n            <Upload.Dragger\n              name="file"\n              listType="picture"\n              multiple\n              customRequest={async ({ file, onError, onSuccess }) => {\n                try {\n                  const rcFile = file as RcFile;\n\n                  const { $id } = await storage.createFile("default", rcFile.name, rcFile);\n\n                  const url = storage.getFileView("default", $id);\n\n                  onSuccess?.({ url }, new XMLHttpRequest());\n                } catch (error) {\n                  onError?.(new Error("Upload Error"));\n                }\n              }}\n            >\n              <p className="ant-upload-text">Drag &amp; drop a file in this area</p>\n            </Upload.Dragger>\n          </Form.Item>\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n')))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173",live:!0,previewOnly:!0,url:"http://localhost:5173"},'setInitialRoutes(["/posts/create"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, { CatchAllNavigate, NavigateToResource } from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayoutV2,\n  RefineThemes,\n  notificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={{\n            ...authProvider,\n            check: async () => ({\n              authenticated: true,\n            }),\n          }}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={notificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route index element={<NavigateToResource resource="61c43ad33b857" />} />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\nrender(<App />);\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"By default, Read Access and Write Access are public when creating documents via Refine. If you want to restrict ",(0,o.kt)("a",{parentName:"p",href:"https://appwrite.io/docs/permissions#permission-types"},"permissions")," and only allow specific users, you need to specify it in meta."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { Permission, Role } from "@refinedev/appwrite";\nconst { formProps, saveButtonProps } = useForm<IPost>({\n  meta: {\n    writePermissions: [Permission.read(Role.any())],\n    readPermissions: [Permission.read(Role.any())],\n  },\n});\n'))),(0,o.kt)("h2",{id:"edit-page"},"Edit Page"),(0,o.kt)("p",null,"You can edit the posts and categories we have created update your data."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Show Code"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nimport { Edit, useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select, Upload } from "antd";\nimport { RcFile } from "antd/lib/upload/interface";\n\nimport MDEditor from "@uiw/react-md-editor";\n\nimport { IPost, ICategory } from "interfaces";\nimport { storage, normalizeFile } from "utility";\n\nexport const PostsEdit: React.FC = () => {\n  const { formProps, saveButtonProps, queryResult } = useForm<IPost>();\n\n  const postData = queryResult?.data?.data;\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: "61bc4afa9ee2c",\n    defaultValue: postData?.categoryId,\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <MDEditor data-color-mode="light" />\n        </Form.Item>\n        <Form.Item label="Images">\n          <Form.Item name="images" valuePropName="fileList" normalize={normalizeFile} noStyle>\n            <Upload.Dragger\n              name="file"\n              listType="picture"\n              multiple\n              customRequest={async ({ file, onError, onSuccess }) => {\n                try {\n                  const rcFile = file as RcFile;\n\n                  const { $id } = await storage.createFile("default", rcFile.name, rcFile);\n\n                  const url = storage.getFileView("default", $id);\n\n                  onSuccess?.({ url }, new XMLHttpRequest());\n                } catch (error) {\n                  onError?.(new Error("Upload Error"));\n                }\n              }}\n            >\n              <p className="ant-upload-text">Drag &amp; drop a file in this area</p>\n            </Upload.Dragger>\n          </Form.Item>\n        </Form.Item>\n      </Form>\n    </Edit>\n  );\n};\n')))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173",live:!0,previewOnly:!0,url:"http://localhost:5173"},'setInitialRoutes(["/posts/edit/61c4697ab9ff9"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, { CatchAllNavigate, NavigateToResource } from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayoutV2,\n  RefineThemes,\n  notificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={{\n            ...authProvider,\n            check: async () => ({\n              authenticated: true,\n            }),\n          }}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={notificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route index element={<NavigateToResource resource="61c43ad33b857" />} />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\nrender(<App />);\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("admonition",{type:"additional"},(0,o.kt)("p",{parentName:"admonition"},"Username: ",(0,o.kt)("inlineCode",{parentName:"p"},"demo@refine.dev")),(0,o.kt)("p",{parentName:"admonition"},"Password: ",(0,o.kt)("inlineCode",{parentName:"p"},"demodemo"))),(0,o.kt)(b,{path:"data-provider-appwrite",mdxType:"CodeSandboxExample"}))}C.isMDXComponent=!0}}]);