"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[49683],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?i.createElement(h,a(a({ref:t},p),{},{components:n})):i.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:r,a[1]=d;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},28334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>d,metadata:()=>l,toc:()=>c});n(67294);var i=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const d={title:"Edit",swizzle:!0},s=void 0,l={unversionedId:"ui-integrations/ant-design/components/buttons/edit-button/index",id:"ui-integrations/ant-design/components/buttons/edit-button/index",title:"Edit",description:"` uses Ant Design's  component and the edit method from useNavigation` under the hood.",source:"@site/docs/ui-integrations/ant-design/components/buttons/edit-button/index.md",sourceDirName:"ui-integrations/ant-design/components/buttons/edit-button",slug:"/ui-integrations/ant-design/components/buttons/edit-button/",permalink:"/docs/ui-integrations/ant-design/components/buttons/edit-button/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/ui-integrations/ant-design/components/buttons/edit-button/index.md",tags:[],version:"current",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1701699637,formattedLastUpdatedAt:"Dec 4, 2023",frontMatter:{title:"Edit",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Delete",permalink:"/docs/ui-integrations/ant-design/components/buttons/delete-button/"},next:{title:"Export",permalink:"/docs/ui-integrations/ant-design/components/buttons/export-button/"}},p={},c=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>meta</code>",id:"meta",level:3},{value:"<code>hideText</code>",id:"hidetext",level:3},{value:"<code>accessControl</code>",id:"accesscontrol",level:3},{value:"<del><code>resourceNameOrRouteName</code></del> <PropTag deprecated />",id:"resourcenameorroutename-",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},m=u("PropTag"),h=u("PropsTable"),f={toc:c};function g(e){var{components:t}=e,n=a(e,["components"]);return(0,i.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){r(e,t,n[t])}))}return e}({},f,n),{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<EditButton>")," uses Ant Design's ",(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/button/"},(0,i.kt)("inlineCode",{parentName:"a"},"<Button>"))," component and the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," method from ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/hooks/navigation/use-navigation"},(0,i.kt)("inlineCode",{parentName:"a"},"useNavigation"))," under the hood."),(0,i.kt)("p",null,"It can be useful when redirecting the app to the edit page with the record id route of resource."),(0,i.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,i.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,i.kt)("strong",{parentName:"a"},"refine CLI")))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'// visible-block-start\nimport {\n  List,\n  useTable,\n  // highlight-next-line\n  EditButton,\n} from "@refinedev/antd";\nimport { Table } from "antd";\n\nconst PostList: React.FC = () => {\n  const { tableProps } = useTable<IPost>();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" width="100%" />\n        <Table.Column<IPost>\n          title="Actions"\n          dataIndex="actions"\n          key="actions"\n          render={(_, record) => (\n            // highlight-next-line\n            <EditButton size="small" recordItemId={record.id} />\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n')),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"recorditemid"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordItemId")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"recordItemId")," is used to append the record id to the end of the route path."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=150px disableScroll",live:!0,disableScroll:!0,previewHeight:"150px"},'const { useRouterContext } = RefineCore;\n// visible-block-start\nimport { EditButton } from "@refinedev/antd";\n\nconst MyEditComponent = () => {\n  return (\n    <EditButton\n      resource="posts"\n      // highlight-next-line\n      recordItemId="123"\n    />\n  );\n};\n\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => {\n          return <RefineAntd.List>List page here...</RefineAntd.List>;\n        },\n        edit: () => {\n          return <RefineAntd.Edit>Edit page here...</RefineAntd.Edit>;\n        },\n      },\n    ]}\n    DashboardPage={MyEditComponent}\n  />,\n);\n')),(0,i.kt)("p",null,"Clicking the button will trigger the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," method of ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/hooks/navigation/use-navigation"},(0,i.kt)("inlineCode",{parentName:"a"},"useNavigation"))," and then redirect the app to the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," action path of the resource, filling the necessary parameters in the route."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"<EditButton>")," component reads the id information from the route by default.")),(0,i.kt)("h3",{id:"resource"},(0,i.kt)("inlineCode",{parentName:"h3"},"resource")),(0,i.kt)("p",null,"The redirection endpoint is defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," property and its ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," action path. By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"<EditButton>")," uses the inferred resource from the route."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=150px disableScroll",live:!0,disableScroll:!0,previewHeight:"150px"},'const { useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { EditButton } from "@refinedev/antd";\n\nconst MyEditComponent = () => {\n  return (\n    <EditButton\n      // highlight-next-line\n      resource="categories"\n      recordItemId="123"\n    />\n  );\n};\n\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => {\n          return <RefineAntd.List>List page here...</RefineAntd.List>;\n        },\n        edit: () => {\n          return <RefineAntd.Edit>Edit page here...</RefineAntd.Edit>;\n        },\n      },\n      {\n        name: "categories",\n        list: () => {\n          return <RefineAntd.List>List page here...</RefineAntd.List>;\n        },\n        edit: () => {\n          return <RefineAntd.Edit>Edit page here...</RefineAntd.Edit>;\n        },\n      },\n    ]}\n    DashboardPage={MyEditComponent}\n  />,\n);\n')),(0,i.kt)("p",null,"Clicking the button will trigger the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," method of ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/hooks/navigation/use-navigation"},(0,i.kt)("inlineCode",{parentName:"a"},"useNavigation"))," and then redirect the app to the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," action path of the resource, filling the necessary parameters in the route."),(0,i.kt)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,i.kt)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,i.kt)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192"))),(0,i.kt)("h3",{id:"meta"},(0,i.kt)("inlineCode",{parentName:"h3"},"meta")),(0,i.kt)("p",null,"It is used to pass additional parameters to the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," method of ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/hooks/navigation/use-navigation"},(0,i.kt)("inlineCode",{parentName:"a"},"useNavigation")),". By default, existing parameters in the route are used by the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," method. You can pass additional parameters or override the existing ones using the ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," prop."),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," action route is defined by the pattern: ",(0,i.kt)("inlineCode",{parentName:"p"},"/posts/:authorId/edit/:id"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," prop can be used as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyComponent = () => {\n  return <EditButton meta={{ authorId: "10" }} />;\n};\n')),(0,i.kt)("h3",{id:"hidetext"},(0,i.kt)("inlineCode",{parentName:"h3"},"hideText")),(0,i.kt)("p",null,"It is used to show and not show the text of the button. When ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", only the button icon is visible."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=150px disableScroll",live:!0,disableScroll:!0,previewHeight:"150px"},'const { useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { EditButton } from "@refinedev/antd";\n\nconst MyEditComponent = () => {\n  return (\n    <EditButton\n      recordItemId="123"\n      // highlight-next-line\n      hideText={true}\n    />\n  );\n};\n\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/"]}\n    resources={[\n      {\n        name: "posts",\n        list: MyEditComponent,\n        edit: () => {\n          return <RefineAntd.Edit>Edit page here...</RefineAntd.Edit>;\n        },\n      },\n    ]}\n  />,\n);\n')),(0,i.kt)("h3",{id:"accesscontrol"},(0,i.kt)("inlineCode",{parentName:"h3"},"accessControl")),(0,i.kt)("p",null,"This prop can be used to skip access control check with its ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," property or to hide the button when the user does not have the permission to access the resource with ",(0,i.kt)("inlineCode",{parentName:"p"},"hideIfUnauthorized")," property. This is relevant only when an ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/providers/access-control-provider"},(0,i.kt)("inlineCode",{parentName:"a"},"accessControlProvider"))," is provided to ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,i.kt)("inlineCode",{parentName:"a"},"<Refine/>"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { EditButton } from "@refinedev/antd";\n\nexport const MyListComponent = () => {\n  return (\n    <EditButton\n      // highlight-start\n      accessControl={{\n        enabled: true,\n        hideIfUnauthorized: true,\n      }}\n      // highlight-end\n    />\n  );\n};\n')),(0,i.kt)("h3",{id:"resourcenameorroutename-"},(0,i.kt)("del",{parentName:"h3"},(0,i.kt)("inlineCode",{parentName:"del"},"resourceNameOrRouteName"))," ",(0,i.kt)(m,{deprecated:!0,mdxType:"PropTag"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"resourceNameOrRouteName")," prop is deprecated. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," prop instead.")),(0,i.kt)("p",null,"The Redirection endpoint(",(0,i.kt)("inlineCode",{parentName:"p"},"resourceNameOrRouteName/edit"),") is defined by ",(0,i.kt)("inlineCode",{parentName:"p"},"resourceNameOrRouteName")," property. By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"<EditButton>")," uses ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," property of the resource object as an endpoint to redirect after clicking."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=150px disableScroll",live:!0,disableScroll:!0,previewHeight:"150px"},'const { useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { EditButton } from "@refinedev/antd";\n\nconst MyEditComponent = () => {\n  return (\n    <EditButton\n      // highlight-next-line\n      resourceNameOrRouteName="categories"\n      recordItemId="123"\n    />\n  );\n};\n\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => {\n          return <RefineAntd.List>List page here...</RefineAntd.List>;\n        },\n        edit: () => {\n          return <RefineAntd.Edit>Edit page here...</RefineAntd.Edit>;\n        },\n      },\n      {\n        name: "categories",\n        list: () => {\n          return <RefineAntd.List>List page here...</RefineAntd.List>;\n        },\n        edit: () => {\n          return <RefineAntd.Edit>Edit page here...</RefineAntd.Edit>;\n        },\n      },\n    ]}\n    DashboardPage={MyEditComponent}\n  />,\n);\n')),(0,i.kt)("p",null,"Clicking the button will trigger the ",(0,i.kt)("inlineCode",{parentName:"p"},"edit")," method of ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/hooks/navigation/use-navigation"},(0,i.kt)("inlineCode",{parentName:"a"},"useNavigation"))," and then redirect the app to ",(0,i.kt)("inlineCode",{parentName:"p"},"/categories/edit/123"),"."),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("h3",{id:"properties-1"},"Properties"),(0,i.kt)(h,{module:"@refinedev/antd/EditButton",mdxType:"PropsTable"}),(0,i.kt)("admonition",{title:"External Props",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It also accepts all props of Ant Design ",(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/button/#API"},"Button"),".")))}g.isMDXComponent=!0}}]);