"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[61433],{58943:(e,n,t)=>{t.d(n,{x:()=>m});var r=t(86010),o=t(67294),a=t(73808),i=t(96319),l=t(79526);const s=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,r.Z)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){c(e,n,t[n])}))}return e}function d(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const m=e=>{var n;return"nextjs"===(null===(n=e)||void 0===n?void 0:n.template)?o.createElement(g,e):o.createElement(f,e)},f=e=>{var n,t,c,m,f,g,b,h,v,k,y,C,x,P,w,{startRoute:S,showNavigator:T,showLineNumbers:I,showOpenInCodeSandbox:O,initialPercentage:R=50,dependencies:E,options:F={showTabs:!0,initMode:"lazy",classes:{"sp-cm":"p-0 bg-transparent"}},template:M="react-ts",customSetup:D,files:N,previewOnly:z,layout:B,height:j=420,wrapperClassName:G,className:H,showFiles:L=!1,showConsole:A=!1,hidePreview:U=!1}=e,V=p(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[K,$]=o.useState(!1);o.useEffect((()=>{$(!0)}),[]);const{colorMode:q}=(0,l.I)();var W,X;null!=F||(F={}),null!==(W=(P=F).resizablePanels)&&void 0!==W||(P.resizablePanels=!0),null!==(X=(w=F).editorWidthPercentage)&&void 0!==X||(w.editorWidthPercentage=null!=R?R:50);const Z={showTabs:F.showTabs,showLineNumbers:F.showLineNumbers,showInlineErrors:F.showInlineErrors,wrapContent:F.wrapContent,closableTabs:F.closableTabs,initMode:F.initMode,extensions:null===(n=F.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=F.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:F.readOnly,showReadOnly:F.showReadOnly,additionalLanguages:null===(c=F.codeEditor)||void 0===c?void 0:c.additionalLanguages},_={activeFile:F.activeFile,visibleFiles:F.visibleFiles,recompileMode:F.recompileMode,recompileDelay:F.recompileDelay,autorun:F.autorun,autoReload:F.autoReload,bundlerURL:F.bundlerURL,startRoute:F.startRoute,skipEval:F.skipEval,fileResolver:F.fileResolver,initMode:F.initMode,initModeObserverOptions:F.initModeObserverOptions,externalResources:F.externalResources,logLevel:F.logLevel,classes:F.classes},[J,Q]=o.useState(!1),{onHandleMouseDown:Y,horizontalSize:ee}=(({initialSize:e=50})=>{const[n,t]=o.useState(e),r=o.useRef(null),a=e=>{if(!r.current)return;const n=r.current.parentElement;if(!n)return;const{left:o,width:a}=n.getBoundingClientRect(),i=(e.clientX-o)/a*100,l=Math.min(Math.max(i,25),75);t(l),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const n=null===(e=r.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:F.editorWidthPercentage}),ne=!z&&!(null===(f=B)||void 0===f||null===(m=f.includes)||void 0===m?void 0:m.call(f,"col"));var te,re,oe,ae,ie,le;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.Z)("pb-6",G)},o.createElement("div",{className:(0,r.Z)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",H)},o.createElement(i.oT,u({key:`${M}-${q}-${K}`,customSetup:u({dependencies:E},D),files:N,options:_,template:M,theme:"light"===q?d(u({},a.FM),{colors:d(u({},a.FM.colors),{accent:"#1D1E30",surface1:"#F4F8FB",surface2:"rgb(222, 229, 237)",surface3:"rgb(222, 229, 237)"})}):d(u({},a.I2),{colors:d(u({},a.I2.colors),{surface1:"#1D1E30",surface2:"#303450",surface3:"#303450"})}),className:(0,r.Z)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},V),o.createElement(i.sp,{className:(0,r.Z)("col"===B&&"!flex-col","col-reverse"===B&&"!flex-col-reverse")},L&&o.createElement(i.Lj,{autoHiddenFiles:!0,style:{height:null!==(te=F.editorHeight)&&void 0!==te?te:j}}),!z&&o.createElement(i._V,d(u({},Z),{showLineNumbers:I,closableTabs:L,initMode:"lazy",style:d(u({height:null!==(re=F.editorHeight)&&void 0!==re?re:j},(null===(b=B)||void 0===b||null===(g=b.includes)||void 0===g?void 0:g.call(b,"col"))?{flex:"initial"}:{flexGrow:ee,flexShrink:ee,flexBasis:0}),{overflow:"hidden"})})),A?o.createElement(i.Tq,{style:d(u({height:null!==(oe=F.editorHeight)&&void 0!==oe?oe:j},(null===(v=B)||void 0===v||null===(h=v.includes)||void 0===h?void 0:h.call(v,"col"))?{flex:"initial"}:{flexGrow:ee,flexShrink:ee,flexBasis:0}),{overflow:"hidden"})}):null,ne?o.createElement(s,{onMouseDown:Y,horizontalSize:ee}):null,U?null:o.createElement(o.Fragment,null,o.createElement(i.Gj,{showOpenInCodeSandbox:O,startRoute:S,showNavigator:null!=T?T:F.showNavigator,showRefreshButton:F.showRefreshButton,style:d(u({display:U?"none":"flex"},(null===(y=B)||void 0===y||null===(k=y.includes)||void 0===k?void 0:k.call(y,"col"))?{flex:"initial",width:"100%"}:{flexGrow:100-ee,flexShrink:100-ee,flexBasis:0,width:z?"100%":100-ee+"%"}),{gap:0,height:null!==(ae=F.editorHeight)&&void 0!==ae?ae:j})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.Z)("w-12","h-12","rounded-full")}))))))),o.createElement("div",{className:(0,r.Z)(""),style:{height:Number(null!==(ie=F.editorHeight)&&void 0!==ie?ie:j)+2}}),o.createElement("div",{className:(0,r.Z)((null===(x=B)||void 0===x||null===(C=x.includes)||void 0===C?void 0:C.call(x,"col"))?"block":"block md:hidden"),style:{height:Number(null!==(le=F.editorHeight)&&void 0!==le?le:j)+2}})),o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("p",null,`Dependencies: ${Object.keys(null!=E?E:{}).map((e=>`${e}@${E[e]}`))}`),o.createElement("h3",null,"Code Files"),Object.keys(null!=N?N:{}).map((e=>o.createElement("div",{key:e},o.createElement("div",null,`File: ${e}`),o.createElement("div",null,`Content: ${"code"in N[e]?N[e].code:N[e]}`))))))},g=e=>{const n={hidePreview:!0};return o.createElement(f,d(u({},e,n),{template:"react-ts"}))};'\nimport { NavigateToResource } from "@refinedev/nextjs-router";\n\nconst Home = () => {\n    return <NavigateToResource resource="products" />;\n};\n\nexport default Home;\n'.trim()},28955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>T,contentTitle:()=>w,default:()=>z,frontMatter:()=>P,metadata:()=>S,toc:()=>I});var r=t(67294),o=t(3905),a=t(58943);function i(){return r.createElement(a.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@tanstack/react-table":"latest","@refinedev/react-table":"latest"},startRoute:"/",files:{"/App.tsx":{code:l,hidden:!1},"/product-table.tsx":{code:s,hidden:!1,active:!0}}})}const l='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <ProductTable />\n        </Refine>\n    );\n}\n\n'.trim(),s='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\n\nexport const ProductTable: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IProduct>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        getState,\n        setPageIndex,\n        getCanPreviousPage,\n        getPageCount,\n        getCanNextPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n    } = useTable<IProduct>({\n        refineCoreProps: {\n            resource: "products",\n        },\n        columns,\n    });\n\n    return (\n        <div>\n            <h1>Products</h1>\n            <table>\n                <thead>\n                    {getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header) => {\n                                return (\n                                    <th key={header.id}>\n                                        {header.isPlaceholder ? null : (\n                                            <>\n                                                <div\n                                                    onClick={header.column.getToggleSortingHandler()}\n                                                >\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                    {{\n                                                        asc: " \ud83d\udd3c",\n                                                        desc: " \ud83d\udd3d",\n                                                    }[\n                                                        header.column.getIsSorted() as string\n                                                    ] ?? " \u2195\ufe0f"}\n                                                </div>\n                                            </>\n                                        )}\n                                        {header.column.getCanFilter() ? (\n                                            <div>\n                                                <input\n                                                    value={\n                                                        (header.column.getFilterValue() as string) ??\n                                                        ""\n                                                    }\n                                                    onChange={(e) =>\n                                                        header.column.setFilterValue(\n                                                            e.target.value,\n                                                        )\n                                                    }\n                                                />\n                                            </div>\n                                        ) : null}\n                                    </th>\n                                );\n                            })}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody>\n                    {getRowModel().rows.map((row) => {\n                        return (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => {\n                                    return (\n                                        <td key={cell.id}>\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext(),\n                                            )}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n\n            <div>\n                <button\n                    onClick={() => setPageIndex(0)}\n                    disabled={!getCanPreviousPage()}\n                >\n                    {"<<"}\n                </button>\n                <button\n                    onClick={() => previousPage()}\n                    disabled={!getCanPreviousPage()}\n                >\n                    {"<"}\n                </button>\n                <button onClick={() => nextPage()} disabled={!getCanNextPage()}>\n                    {">"}\n                </button>\n                <button\n                    onClick={() => setPageIndex(getPageCount() - 1)}\n                    disabled={!getCanNextPage()}\n                >\n                    {">>"}\n                </button>\n                <span>\n                    Page\n                    <strong>\n                        {getState().pagination.pageIndex + 1} of{" "}\n                        {getPageCount()}\n                    </strong>\n                </span>\n                <span>\n                    | Go to page:\n                    <input\n                        type="number"\n                        defaultValue={getState().pagination.pageIndex + 1}\n                        onChange={(e) => {\n                            const page = e.target.value\n                                ? Number(e.target.value) - 1\n                                : 0;\n                            setPageIndex(page);\n                        }}\n                    />\n                </span>{" "}\n                <select\n                    value={getState().pagination.pageSize}\n                    onChange={(e) => {\n                        setPageSize(Number(e.target.value));\n                    }}\n                >\n                    {[10, 20, 30, 40, 50].map((pageSize) => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </div>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n\n'.trim();function c(){return r.createElement(a.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/mantine":"latest","@refinedev/react-table":"latest","@tanstack/react-table":"latest","@mantine/core":"^5.10.4","@tabler/icons":"^1.119.0"},startRoute:"/",files:{"/App.tsx":{code:u,hidden:!1},"/product-table.tsx":{code:d,hidden:!1,active:!0},"/column-sorter.tsx":{code:p,hidden:!1},"/column-filter.tsx":{code:m,hidden:!1}}})}const u='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { MantineProvider, Global } from "@mantine/core";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <MantineProvider\n                withNormalizeCSS\n                withGlobalStyles\n        >\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <Refine dataProvider={dataProvider(API_URL)}>\n                <ProductTable />\n            </Refine>\n        </MantineProvider>\n    );\n}\n\n'.trim(),d='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { Box, Group, Table, Pagination } from "@mantine/core";\n\nimport { ColumnSorter } from "./column-sorter.tsx";\nimport { ColumnFilter } from "./column-filter.tsx";\n\nexport const ProductTable: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IProduct>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        refineCore: { setCurrent, pageCount, current },\n    } = useTable({\n        refineCoreProps: {\n            resource: "products",\n        },\n        columns,\n    });\n\n    return (\n        <div style={{ padding: "4px" }}>\n            <h2>Products</h2>\n            <Table highlightOnHover>\n                <thead>\n                    {getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header) => {\n                                return (\n                                    <th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <Group spacing="xs" noWrap>\n                                                <Box>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Box>\n                                                <Group spacing="xs" noWrap>\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </Group>\n                                            </Group>\n                                        )}\n                                    </th>\n                                );\n                            })}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody>\n                    {getRowModel().rows.map((row) => {\n                        return (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => {\n                                    return (\n                                        <td key={cell.id}>\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext(),\n                                            )}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n            <br />\n            <Pagination\n                position="right"\n                total={pageCount}\n                page={current}\n                onChange={setCurrent}\n            />\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n\n'.trim(),p='\nimport { ActionIcon } from "@mantine/core";\nimport { IconChevronDown, IconSelector, IconChevronUp } from "@tabler/icons";\n\nexport interface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\nexport const ColumnSorter: React.FC<ColumnButtonProps> = ({ column }) => {\n    if (!column.getCanSort()) {\n        return null;\n    }\n\n    const sorted = column.getIsSorted();\n\n    return (\n        <ActionIcon\n            size="xs"\n            onClick={column.getToggleSortingHandler()}\n            style={{\n                transition: "transform 0.25s",\n                transform: `rotate(${sorted === "asc" ? "180" : "0"}deg)`,\n            }}\n            variant={sorted ? "light" : "transparent"}\n            color={sorted ? "primary" : "gray"}\n        >\n            {!sorted && <IconSelector size={18} />}\n            {sorted === "asc" && <IconChevronDown size={18} />}\n            {sorted === "desc" && <IconChevronUp size={18} />}\n        </ActionIcon>\n    );\n};\n'.trim(),m='\nimport React, { useState } from "react";\nimport { Column } from "@tanstack/react-table";\nimport { TextInput, Menu, ActionIcon, Stack, Group } from "@mantine/core";\nimport { IconFilter, IconX, IconCheck } from "@tabler/icons";\n\ninterface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\nexport const ColumnFilter: React.FC<ColumnButtonProps> = ({ column }) => {\n    // eslint-disable-next-line\n    const [state, setState] = useState(null as null | { value: any });\n\n    if (!column.getCanFilter()) {\n        return null;\n    }\n\n    const open = () =>\n        setState({\n            value: column.getFilterValue(),\n        });\n\n    const close = () => setState(null);\n\n    // eslint-disable-next-line\n    const change = (value: any) => setState({ value });\n\n    const clear = () => {\n        column.setFilterValue(undefined);\n        close();\n    };\n\n    const save = () => {\n        if (!state) return;\n        column.setFilterValue(state.value);\n        close();\n    };\n\n    const renderFilterElement = () => {\n        // eslint-disable-next-line\n        const FilterComponent = (column.columnDef?.meta as any)?.filterElement;\n\n        if (!FilterComponent && !!state) {\n            return (\n                <TextInput\n                    autoComplete="off"\n                    value={state.value}\n                    onChange={(e) => change(e.target.value)}\n                />\n            );\n        }\n\n        return <FilterComponent value={state?.value} onChange={change} />;\n    };\n\n    return (\n        <Menu\n            opened={!!state}\n            position="bottom"\n            withArrow\n            transition="scale-y"\n            shadow="xl"\n            onClose={close}\n            width="256px"\n            withinPortal\n        >\n            <Menu.Target>\n                <ActionIcon\n                    size="xs"\n                    onClick={open}\n                    variant={column.getIsFiltered() ? "light" : "transparent"}\n                    color={column.getIsFiltered() ? "primary" : "gray"}\n                >\n                    <IconFilter size={18} />\n                </ActionIcon>\n            </Menu.Target>\n            <Menu.Dropdown>\n                {!!state && (\n                    <Stack p="xs" spacing="xs">\n                        {renderFilterElement()}\n                        <Group position="right" spacing={6} noWrap>\n                            <ActionIcon\n                                size="md"\n                                color="gray"\n                                variant="outline"\n                                onClick={clear}\n                            >\n                                <IconX size={18} />\n                            </ActionIcon>\n                            <ActionIcon\n                                size="md"\n                                onClick={save}\n                                color="primary"\n                                variant="outline"\n                            >\n                                <IconCheck size={18} />\n                            </ActionIcon>\n                        </Group>\n                    </Stack>\n                )}\n            </Menu.Dropdown>\n        </Menu>\n    );\n};\n\n'.trim();function f(){return r.createElement(a.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-table":"latest","@tanstack/react-table":"latest","@refinedev/chakra-ui":"latest","@chakra-ui/react":"^2.5.1","@tabler/icons":"^1.119.0"},startRoute:"/",files:{"/App.tsx":{code:g,hidden:!1},"/product-table.tsx":{code:b,hidden:!1,active:!0},"/pagination.tsx":{code:h,hidden:!1},"/column-sorter.tsx":{code:v,hidden:!1},"/column-filter.tsx":{code:k,hidden:!1}}})}const g='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ChakraProvider } from "@chakra-ui/react";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <ChakraProvider>\n            <Refine dataProvider={dataProvider(API_URL)}>\n                <ProductTable />\n            </Refine>\n        </ChakraProvider>\n    );\n}\n\n'.trim(),b='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\nimport { Pagination } from "./pagination";\n\nimport { ColumnSorter } from "./column-sorter";\nimport { ColumnFilter } from "./column-filter";\n\nexport const ProductTable: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IProduct>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        refineCore: { setCurrent, pageCount, current },\n    } = useTable({\n        refineCoreProps: {\n            resource: "products",\n        },\n        columns,\n    });\n\n    return (\n        <div style={{ padding:"8px" }}>\n            <Text fontSize=\'3xl\'>Products</Text>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n'.trim(),h='\nimport { FC } from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nexport const Pagination: FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <Button\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        Prev\n                    </Button>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <Button\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        Next\n                    </Button>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n'.trim(),v='\nimport React, { useState } from "react";\nimport { IconButton } from "@chakra-ui/react";\nimport { IconChevronDown, IconChevronUp, IconSelector } from "@tabler/icons";\n\nimport type { SortDirection } from "@tanstack/react-table";\n\nexport interface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\n\nexport const ColumnSorter: React.FC<ColumnButtonProps> = ({ column }) => {\n    if (!column.getCanSort()) {\n        return null;\n    }\n\n    const sorted = column.getIsSorted();\n\n    return (\n        <IconButton\n            aria-label="Sort"\n            size="xs"\n            onClick={column.getToggleSortingHandler()}\n            icon={<ColumnSorterIcon sorted={sorted} />}\n            variant={sorted ? "light" : "transparent"}\n            color={sorted ? "primary" : "gray"}\n        />\n    );\n};\n\nconst ColumnSorterIcon = ({ sorted }: { sorted: false | SortDirection }) => {\n    if (sorted === "asc") return <IconChevronDown size={18} />;\n    if (sorted === "desc") return <IconChevronUp size={18} />;\n    return <IconSelector size={18} />;\n};\n\n'.trim(),k='\nimport React, { useState } from "react";\nimport {\n    Input,\n    Menu,\n    IconButton,\n    MenuButton,\n    MenuList,\n    VStack,\n    HStack,\n} from "@chakra-ui/react";\nimport { IconFilter, IconX, IconCheck } from "@tabler/icons";\n\n\ninterface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\nexport const ColumnFilter: React.FC<ColumnButtonProps> = ({ column }) => {\n    // eslint-disable-next-line\n    const [state, setState] = useState(null as null | { value: any });\n\n    if (!column.getCanFilter()) {\n        return null;\n    }\n\n    const open = () =>\n        setState({\n            value: column.getFilterValue(),\n        });\n\n    const close = () => setState(null);\n\n    // eslint-disable-next-line\n    const change = (value: any) => setState({ value });\n\n    const clear = () => {\n        column.setFilterValue(undefined);\n        close();\n    };\n\n    const save = () => {\n        if (!state) return;\n        column.setFilterValue(state.value);\n        close();\n    };\n\n    const renderFilterElement = () => {\n        // eslint-disable-next-line\n        const FilterComponent = (column.columnDef?.meta as any)?.filterElement;\n\n        if (!FilterComponent && !!state) {\n            return (\n                <Input\n                    borderRadius="md"\n                    size="sm"\n                    autoComplete="off"\n                    value={state.value}\n                    onChange={(e) => change(e.target.value)}\n                />\n            );\n        }\n\n        return (\n            <FilterComponent\n                value={state?.value}\n                onChange={(e: any) => change(e.target.value)}\n            />\n        );\n    };\n\n    return (\n        <Menu isOpen={!!state} onClose={close}>\n            <MenuButton\n                onClick={open}\n                as={IconButton}\n                aria-label="Options"\n                icon={<IconFilter size="16" />}\n                variant="ghost"\n                size="xs"\n            />\n            <MenuList p="2">\n                {!!state && (\n                    <VStack align="flex-start">\n                        {renderFilterElement()}\n                        <HStack spacing="1">\n                            <IconButton\n                                aria-label="Clear"\n                                size="sm"\n                                colorScheme="red"\n                                onClick={clear}\n                            >\n                                <IconX size={18} />\n                            </IconButton>\n                            <IconButton\n                                aria-label="Save"\n                                size="sm"\n                                onClick={save}\n                                colorScheme="green"\n                            >\n                                <IconCheck size={18} />\n                            </IconButton>\n                        </HStack>\n                    </VStack>\n                )}\n            </MenuList>\n        </Menu>\n    );\n};\n'.trim();function y(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function C(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function x(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const P={title:"Introduction",source:"/packages/react-table/src/useTable"},w='TanStack Table <GuideBadge id="guides-concepts/tables" /> <RouterBadge id="guides-concepts/routing/#usetable" />',S={unversionedId:"packages/tanstack-table/introduction/index",id:"packages/tanstack-table/introduction/index",title:"Introduction",description:"Refine provides an integration package for TanStack Table library. This package enables you to manage your tables in a headless manner. This adapter supports all of the features of both TanStack Table and Refine's useTable hook (sorting, filtering pagination etc). Simply, you can use any of the TanStack Table examples as-is by copying and pasting them into your project.",source:"@site/docs/packages/tanstack-table/introduction/index.md",sourceDirName:"packages/tanstack-table/introduction",slug:"/packages/tanstack-table/introduction/",permalink:"/docs/packages/tanstack-table/introduction/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/packages/tanstack-table/introduction/index.md",tags:[],version:"current",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1703228593,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{title:"Introduction",source:"/packages/react-table/src/useTable"},sidebar:"mainSidebar",previous:{title:"List of Packages",permalink:"/docs/packages/list-of-packages/"},next:{title:"useTable",permalink:"/docs/packages/tanstack-table/use-table/"}},T={},I=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],O=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},R=O("GuideBadge"),E=O("RouterBadge"),F=O("InstallPackagesCommand"),M=O("Tabs"),D=O("TabItem"),N={toc:I};function z(e){var{components:n}=e,t=x(e,["components"]);return(0,o.kt)("wrapper",C(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){y(e,n,t[n])}))}return e}({},N,t),{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tanstack-table--"},"TanStack Table ",(0,o.kt)(R,{id:"guides-concepts/tables",mdxType:"GuideBadge"})," ",(0,o.kt)(E,{id:"guides-concepts/routing/#usetable",mdxType:"RouterBadge"})),(0,o.kt)("p",null,"Refine provides an integration package for ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table")," library. This package enables you to manage your tables in a headless manner. This adapter supports all of the features of both ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/use-table"},"Refine's useTable")," hook (sorting, filtering pagination etc). Simply, you can use any of the ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table")," examples as-is by copying and pasting them into your project."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Install the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/react-table"},(0,o.kt)("inlineCode",{parentName:"a"},"@refinedev/react-table"))," library."),(0,o.kt)(F,{args:"@refinedev/react-table",mdxType:"InstallPackagesCommand"}),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Let's see how to display a table with ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"useTable")," hook."),(0,o.kt)("p",null,"We provide implementation examples for the Mantine and Chakra UI. If you using a different ui library, you can use the headless example as a starting point."),(0,o.kt)(M,{wrapContent:!1,mdxType:"Tabs"},(0,o.kt)(D,{value:"headless",label:"Headless",mdxType:"TabItem"},(0,o.kt)(i,{mdxType:"BaseHeadlessTable"})),(0,o.kt)(D,{value:"mantine",label:(0,o.kt)("span",null,(0,o.kt)("span",{className:"block"},"Mantine"),(0,o.kt)("small",{className:"block"},"TanStack Table")),mdxType:"TabItem"},(0,o.kt)(c,{mdxType:"BaseMantineTable"})),(0,o.kt)(D,{value:"chakra-ui",label:(0,o.kt)("span",null,(0,o.kt)("span",{className:"block"},"Chakra UI"),(0,o.kt)("small",{className:"block"},"TanStack Table")),mdxType:"TabItem"},(0,o.kt)(f,{mdxType:"BaseChakraUiTable"}))))}z.isMDXComponent=!0}}]);