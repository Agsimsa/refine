"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[25544],{58943:(e,n,r)=>{r.d(n,{x:()=>p});var t=r(86010),o=r(67294),a=r(73808),i=r(96319),s=r(79526);const d=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,t.Z)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function u(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},t=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),t.forEach((function(n){u(e,n,r[n])}))}return e}function m(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})),e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const p=e=>{var n;return"nextjs"===(null===(n=e)||void 0===n?void 0:n.template)?o.createElement(f,e):o.createElement(h,e)},h=e=>{var n,r,u,p,h,f,g,v,k,b,C,y,P,x,T,{startRoute:w,showNavigator:F,showLineNumbers:R,showOpenInCodeSandbox:L,initialPercentage:I=50,dependencies:N,options:E={showTabs:!0,initMode:"lazy",classes:{"sp-cm":"p-0 bg-transparent"}},template:M="react-ts",customSetup:S,files:B,previewOnly:D,layout:H,height:O=420,wrapperClassName:q,className:A,showFiles:z=!1,showConsole:V=!1,hidePreview:G=!1}=e,U=l(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const{colorMode:j}=(0,s.I)();var $,K;null!=E||(E={}),null!==($=(x=E).resizablePanels)&&void 0!==$||(x.resizablePanels=!0),null!==(K=(T=E).editorWidthPercentage)&&void 0!==K||(T.editorWidthPercentage=null!=I?I:50);const _={showTabs:E.showTabs,showLineNumbers:E.showLineNumbers,showInlineErrors:E.showInlineErrors,wrapContent:E.wrapContent,closableTabs:E.closableTabs,initMode:E.initMode,extensions:null===(n=E.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(r=E.codeEditor)||void 0===r?void 0:r.extensionsKeymap,readOnly:E.readOnly,showReadOnly:E.showReadOnly,additionalLanguages:null===(u=E.codeEditor)||void 0===u?void 0:u.additionalLanguages},W={activeFile:E.activeFile,visibleFiles:E.visibleFiles,recompileMode:E.recompileMode,recompileDelay:E.recompileDelay,autorun:E.autorun,autoReload:E.autoReload,bundlerURL:E.bundlerURL,startRoute:E.startRoute,skipEval:E.skipEval,fileResolver:E.fileResolver,initMode:E.initMode,initModeObserverOptions:E.initModeObserverOptions,externalResources:E.externalResources,logLevel:E.logLevel,classes:E.classes},[Q,X]=o.useState(!1),{onHandleMouseDown:J,horizontalSize:Z}=(({initialSize:e=50})=>{const[n,r]=o.useState(e),t=o.useRef(null),a=e=>{if(!t.current)return;const n=t.current.parentElement;if(!n)return;const{left:o,width:a}=n.getBoundingClientRect(),i=(e.clientX-o)/a*100,s=Math.min(Math.max(i,25),75);r(s),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const n=null===(e=t.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),t.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{t.current=e.target}),[])}})({initialSize:E.editorWidthPercentage}),Y=!D&&!(null===(h=H)||void 0===h||null===(p=h.includes)||void 0===p?void 0:p.call(h,"col"));var ee,ne,re,te,oe,ae;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,t.Z)("pb-6",q)},o.createElement("div",{className:(0,t.Z)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",A)},o.createElement(i.oT,c({key:M,customSetup:c({dependencies:N},S),files:B,options:W,template:M,theme:"light"===j?m(c({},i.dN),{colors:m(c({},i.dN.colors),{surface1:"#F4F8FB",surface2:"rgb(222, 229, 237)",surface3:"rgb(222, 229, 237)"})}):m(c({},a.I2),{colors:m(c({},a.I2.colors),{surface1:"#1D1E30",surface2:"#303450",surface3:"#303450"})}),className:(0,t.Z)("not-prose sandpack-container","max-w-screen-xl")},U),o.createElement(i.sp,{className:(0,t.Z)("col"===H&&"!flex-col","col-reverse"===H&&"!flex-col-reverse")},z&&o.createElement(i.Lj,{autoHiddenFiles:!0,style:{height:null!==(ee=E.editorHeight)&&void 0!==ee?ee:O}}),!D&&o.createElement(i._V,m(c({},_),{showLineNumbers:R,closableTabs:z,initMode:"lazy",style:m(c({height:null!==(ne=E.editorHeight)&&void 0!==ne?ne:O},(null===(g=H)||void 0===g||null===(f=g.includes)||void 0===f?void 0:f.call(g,"col"))?{flex:"initial"}:{flexGrow:Z,flexShrink:Z,flexBasis:0}),{overflow:"hidden"})})),V?o.createElement(i.Tq,{style:m(c({height:null!==(re=E.editorHeight)&&void 0!==re?re:O},(null===(k=H)||void 0===k||null===(v=k.includes)||void 0===v?void 0:v.call(k,"col"))?{flex:"initial"}:{flexGrow:Z,flexShrink:Z,flexBasis:0}),{overflow:"hidden"})}):null,Y?o.createElement(d,{onMouseDown:J,horizontalSize:Z}):null,G?null:o.createElement(o.Fragment,null,o.createElement(i.Gj,{showOpenInCodeSandbox:L,startRoute:w,showNavigator:null!=F?F:E.showNavigator,showRefreshButton:E.showRefreshButton,style:m(c({display:G?"none":"flex"},(null===(C=H)||void 0===C||null===(b=C.includes)||void 0===b?void 0:b.call(C,"col"))?{flex:"initial",width:"100%"}:{flexGrow:100-Z,flexShrink:100-Z,flexBasis:0,width:D?"100%":100-Z+"%"}),{gap:0,height:null!==(te=E.editorHeight)&&void 0!==te?te:O})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,t.Z)("w-12","h-12","rounded-full")}))))))),o.createElement("div",{className:(0,t.Z)(""),style:{height:Number(null!==(oe=E.editorHeight)&&void 0!==oe?oe:O)+2}}),o.createElement("div",{className:(0,t.Z)((null===(P=H)||void 0===P||null===(y=P.includes)||void 0===y?void 0:y.call(P,"col"))?"block":"block md:hidden"),style:{height:Number(null!==(ae=E.editorHeight)&&void 0!==ae?ae:O)+2}})),o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("p",null,`Dependencies: ${Object.keys(null!=N?N:{}).map((e=>`${e}@${N[e]}`))}`),o.createElement("h3",null,"Code Files"),Object.keys(null!=B?B:{}).map((e=>o.createElement("div",{key:e},o.createElement("div",null,`File: ${e}`),o.createElement("div",null,`Content: ${"code"in B[e]?B[e].code:B[e]}`))))))},f=e=>{const n={hidePreview:!0};return o.createElement(h,m(c({},e,n),{template:"react-ts"}))};'\nimport { NavigateToResource } from "@refinedev/nextjs-router";\n\nconst Home = () => {\n    return <NavigateToResource resource="products" />;\n};\n\nexport default Home;\n'.trim()},49880:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>Me,contentTitle:()=>Ne,default:()=>qe,frontMatter:()=>Ie,metadata:()=>Ee,toc:()=>Se});var t=r(67294),o=r(3905),a=r(58943);function i(){return t.createElement(a.x,{showNavigator:!0,previewOnly:!0,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","react-dom":"^18.0.0","react-router":"latest","react-router-dom":"^6.8.1","react-hook-form":"^7.30.0"},startRoute:"/products",files:{"/App.tsx":{code:u,active:!0},"/pages/products/index.tsx":{code:d},"/pages/products/list.tsx":{code:m},"/pages/products/show.tsx":{code:l},"/pages/products/edit.tsx":{code:p},"/pages/products/create.tsx":{code:h},"/components/pagination/index.tsx":{code:c},"/auth-provider.tsx":{code:s,hidden:!0}}})}const s='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),d='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),u='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    AuthPage\n} from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router-dom";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductCreate, ProductEdit, ProductShow } from "./pages/products";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    notificationProvider={notificationProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    authProvider={authProvider}\n                    resources={[\n                        {\n                            name: "products",\n                            list: "/products",\n                            show: "/products/:id",\n                            edit: "/products/:id/edit",\n                            create: "/products/create",\n                            meta: {\n                                canDelete: true,\n                            },\n                        },\n                    ]}\n                >\n                    <Routes>\n                        <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                        <Route\n                            element={\n                                <ThemedLayoutV2>\n                                    <Outlet />\n                                </ThemedLayoutV2>\n                            }\n                        >\n                            <Route index element={<NavigateToResource resource="products" />} />\n                            <Route path="/products" element={<Outlet />}>\n                                <Route index element={<ProductList />} />\n                                <Route path="create" element={<ProductCreate />} />\n                                <Route path=":id" element={<ProductShow />} />\n                                <Route path=":id/edit" element={<ProductEdit />} />\n                            </Route>\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                        </Route>\n                        <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                            <Route\n                                path="/login"\n                                element={(\n                                <AuthPage\n                                    type="login"\n                                    formProps={{\n                                    defaultValues: {\n                                        email: "demo@refine.dev",\n                                        password: "demodemo",\n                                    },\n                                    }}\n                                />\n                                )}\n                            />\n                            <Route path="/register" element={<AuthPage type="register" />} />\n                            <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                            <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),c='\nimport React from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        <IconChevronLeft size="18" />\n                    </IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </IconButton>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n',m='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../../components/pagination";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim(),l='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/chakra-ui";\n\nimport { Heading } from "@chakra-ui/react";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Heading as="h5" size="sm">\n                Id\n            </Heading>\n            <TextField value={record?.id} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Name\n            </Heading>\n            <TextField value={record?.name} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Material\n            </Heading>\n            <TextField value={record?.material} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Description\n            </Heading>\n            <MarkdownField value={record?.description} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Price\n            </Heading>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),p='\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductEdit = () => {\n    const {\n        refineCore: { formLoading, queryResult, autoSaveProps },\n        saveButtonProps,\n        register,\n        formState: { errors },\n        setValue,\n    } = useForm({\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n    });\n\n    return (\n        <Edit\n            isLoading={formLoading}\n            saveButtonProps={saveButtonProps}\n            autoSaveProps={autoSaveProps}\n        >\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Edit>\n    );\n};\n'.trim(),h='\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm<IPost>();\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Create>\n    );\n};\n'.trim();function f(){return t.createElement(a.x,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","react-dom":"^18.0.0","react-router-dom":"^6.8.1"},startRoute:"/products",files:{"/App.tsx":{code:k,active:!0},"/pages/products/index.tsx":{code:v},"/pages/products/list.tsx":{code:C},"/pages/products/show.tsx":{code:y},"/pages/products/edit.tsx":{code:P},"/pages/products/create.tsx":{code:x},"/components/pagination/index.tsx":{code:b},"/auth-provider.tsx":{code:g,hidden:!0}}})}const g='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),v='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),k='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    AuthPage\n} from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router-dom";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductCreate, ProductEdit, ProductShow } from "./pages/products";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    notificationProvider={notificationProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    authProvider={authProvider}\n                    resources={[\n                        {\n                            name: "products",\n                            list: "/products",\n                            show: "/products/:id",\n                            edit: "/products/:id/edit",\n                            create: "/products/create",\n                            meta: {\n                                canDelete: true,\n                            },\n                        },\n                    ]}\n                >\n                    <Routes>\n                        <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                            <Route\n                                element={\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                }\n                            >\n                                <Route index element={<NavigateToResource resource="products" />} />\n                                <Route path="/products" element={<Outlet />}>\n                                    <Route index element={<ProductList />} />\n                                    <Route path="create" element={<ProductCreate />} />\n                                    <Route path=":id" element={<ProductShow />} />\n                                    <Route path=":id/edit" element={<ProductEdit />} />\n                                </Route>\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                        </Route>\n                        <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                            <Route\n                                path="/login"\n                                element={(\n                                <AuthPage\n                                    type="login"\n                                    formProps={{\n                                    defaultValues: {\n                                        email: "demo@refine.dev",\n                                        password: "demodemo",\n                                    },\n                                    }}\n                                />\n                                )}\n                            />\n                            <Route path="/register" element={<AuthPage type="register" />} />\n                            <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                            <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),b='\nimport React from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        <IconChevronLeft size="18" />\n                    </IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </IconButton>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n',C='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../../components/pagination";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim(),y='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/chakra-ui";\n\nimport { Heading } from "@chakra-ui/react";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Heading as="h5" size="sm">\n                Id\n            </Heading>\n            <TextField value={record?.id} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Name\n            </Heading>\n            <TextField value={record?.name} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Material\n            </Heading>\n            <TextField value={record?.material} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Description\n            </Heading>\n            <MarkdownField value={record?.description} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Price\n            </Heading>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),P='\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductEdit = () => {\n    const {\n        refineCore: { formLoading, queryResult, autoSaveProps },\n        saveButtonProps,\n        register,\n        formState: { errors },\n        setValue,\n    } = useForm({\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n    });\n\n    return (\n        <Edit\n            isLoading={formLoading}\n            saveButtonProps={saveButtonProps}\n            autoSaveProps={autoSaveProps}\n        >\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Edit>\n    );\n};\n'.trim(),x='\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm<IPost>();\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Create>\n    );\n};\n'.trim();function T(){return t.createElement(a.x,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","@refinedev/nextjs-router":"latest"},startRoute:"/products",files:{"/pages/_app.tsx":{code:L,active:!0},"/pages/products/index.tsx":{code:I},"/pages/products/[id].tsx":{code:N},"/pages/products/[id]/edit.tsx":{code:E},"/pages/products/create.tsx":{code:M},"/pages/login.tsx":{code:F},"/src/components/pagination/index.tsx":{code:R},"/src/auth-provider.tsx":{code:w,hidden:!0}}})}const w='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),F='\nimport React from "react";\nimport { AuthPage } from "@refinedev/chakra-ui";\nimport authProvider from "../src/auth-provider";\n\nimport type { ExtendedNextPage } from "./_app";\n\nconst Login: ExtendedNextPage = () => {\n  return <AuthPage type="login" />;\n};\n\nLogin.noLayout = true;\n\nexport default Login;\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (authenticated) {\n    return {\n      redirect: {\n        destination: "/products",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n'.trim(),R='\nimport React from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        <IconChevronLeft size="18" />\n                    </IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </IconButton>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n',L='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport { RefineThemes, ThemedLayoutV2, notificationProvider } from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport authProvider from "../src/auth-provider";\n\nexport type ExtendedNextPage = NextPage & {\n  noLayout?: boolean;\n};\n\ntype ExtendedAppProps = AppProps & {\n  Component: ExtendedNextPage;\n};\n\nfunction App({ Component, pageProps }: ExtendedAppProps) {\n  const renderComponent = () => {\n      if (Component.noLayout) {\n          return <Component {...pageProps} />;\n      }\n\n      return (\n          <ThemedLayoutV2>\n              <Component {...pageProps} />\n          </ThemedLayoutV2>\n      );\n  }\n\n  return (\n    <ChakraProvider theme={RefineThemes.Blue}>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        notificationProvider={notificationProvider}\n        authProvider={authProvider}\n        resources={[\n          {\n            name: "products",\n            list: "/products",\n            show: "/products/:id",\n            edit: "/products/:id/edit",\n            create: "/products/create"\n          },\n        ]}\n        options={{ syncWithLocation: true }}\n      >\n        {renderComponent()}\n      </Refine>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n'.trim(),I='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport authProvider from "../../src/auth-provider";\nimport { Pagination } from "../../src/components/pagination";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),N='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/chakra-ui";\n\nimport { Heading } from "@chakra-ui/react";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductShow() {\n  const { queryResult } = useShow();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  return (\n      <Show isLoading={isLoading}>\n          <Heading as="h5" size="sm">\n              Id\n          </Heading>\n          <TextField value={record?.id} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Name\n          </Heading>\n          <TextField value={record?.name} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Material\n          </Heading>\n          <TextField value={record?.material} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Description\n          </Heading>\n          <MarkdownField value={record?.description} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Price\n          </Heading>\n          <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n      </Show>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),E='\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport authProvider from "../../../src/auth-provider";\n\nexport default function ProductEdit() {\n  const {\n    refineCore: { formLoading, queryResult, autoSaveProps },\n    saveButtonProps,\n    register,\n    formState: { errors },\n    setValue,\n} = useForm({\n    refineCoreProps: {\n        autoSave: {\n            enabled: true,\n        },\n    },\n});\n\nreturn (\n    <Edit\n        isLoading={formLoading}\n        saveButtonProps={saveButtonProps}\n        autoSaveProps={autoSaveProps}\n    >\n          <FormControl mb="3" isInvalid={!!errors?.name}>\n              <FormLabel>Name</FormLabel>\n              <Input\n                  id="name"\n                  type="text"\n                  {...register("name", { required: "Name is required" })}\n              />\n              <FormErrorMessage>\n                  {`${errors.name?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n          <FormControl mb="3" isInvalid={!!errors?.material}>\n              <FormLabel>Material</FormLabel>\n              <Input\n                  id="material"\n                  type="text"\n                  {...register("material", { required: "Material is required" })}\n              />\n              <FormErrorMessage>\n                  {`${errors.material?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n          <FormControl mb="3" isInvalid={!!errors?.description}>\n              <FormLabel>Description</FormLabel>\n              <Textarea\n                  id="description"\n                  {...register("description", {\n                      required: "Description is required",\n                  })}\n              />\n              <FormErrorMessage>\n                  {`${errors.description?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n          <FormControl mb="3" isInvalid={!!errors?.price}>\n              <FormLabel>Price</FormLabel>\n              <Input\n                  id="price"\n                  type="number"\n                  {...register("price", { required: "Price is required" })}\n              />\n              <FormErrorMessage>\n                  {`${errors.price?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n      </Edit>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),M='\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductCreate() {\n  const {\n      refineCore: { formLoading },\n      saveButtonProps,\n      register,\n      formState: { errors },\n  } = useForm<IPost>();\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n        <FormControl mb="3" isInvalid={!!errors?.name}>\n            <FormLabel>Name</FormLabel>\n            <Input\n                id="name"\n                type="text"\n                {...register("name", { required: "Name is required" })}\n            />\n            <FormErrorMessage>\n                {`${errors.name?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n        <FormControl mb="3" isInvalid={!!errors?.material}>\n            <FormLabel>Material</FormLabel>\n            <Input\n                id="material"\n                type="text"\n                {...register("material", { required: "Material is required" })}\n            />\n            <FormErrorMessage>\n                {`${errors.material?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n        <FormControl mb="3" isInvalid={!!errors?.description}>\n            <FormLabel>Description</FormLabel>\n            <Textarea\n                id="description"\n                {...register("description", {\n                    required: "Description is required",\n                })}\n            />\n            <FormErrorMessage>\n                {`${errors.description?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n        <FormControl mb="3" isInvalid={!!errors?.price}>\n            <FormLabel>Price</FormLabel>\n            <Input\n                id="price"\n                type="number"\n                {...register("price", { required: "Price is required" })}\n            />\n            <FormErrorMessage>\n                {`${errors.price?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n    </Create>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim();function S(){return t.createElement(a.x,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","@refinedev/remix-router":"latest"},startRoute:"/products",files:{"/app/root.tsx":{code:D,active:!0},"/app/routes/_protected.tsx":{code:H},"/app/routes/_protected.products._index.tsx":{code:A},"/app/routes/_protected.products.$id.tsx":{code:z},"/app/routes/_protected.products.$id.edit.tsx":{code:V},"/app/routes/_protected.products.create.tsx":{code:G},"/app/routes/_auth.tsx":{code:O},"/app/routes/_auth.login.tsx":{code:q},"/app/auth-provider.tsx":{code:B,hidden:!0}}})}const B='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),D='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { notificationProvider, RefineThemes } from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport authProvider from "./auth-provider";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ChakraProvider theme={RefineThemes.Blue}>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            authProvider={authProvider}\n            notificationProvider={notificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n                show: "/products/:id",\n                edit: "/products/:id/edit",\n                create: "/products/create",\n              },\n            ]}\n            options={{ syncWithLocation: true }}\n          >\n            <Outlet />\n          </Refine>\n        </ChakraProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),H='\nimport { ThemedLayoutV2 } from "@refinedev/chakra-ui";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderArgs, redirect } from "@remix-run/node";\n\nimport authProvider from "../auth-provider";\n\nexport default function AuthenticatedLayout() {\n    // `<ThemedLayoutV2>` is only applied to the authenticated users\n    return (\n        <ThemedLayoutV2>\n            <Outlet />\n        </ThemedLayoutV2>\n    );\n}\n\n/**\n * We\'re checking if the current session is authenticated.\n * If not, we\'re redirecting the user to the login page.\n * This is applied for all routes that are nested under this layout (_protected).\n */\nexport async function loader({ request }: LoaderArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (!authenticated) {\n        throw redirect(redirectTo ?? "/login");\n    }\n\n    return {};\n}\n'.trim(),O='\nimport { Outlet } from "@remix-run/react";\nimport { LoaderArgs, redirect } from "@remix-run/node";\n\nimport { authProvider } from "~/authProvider";\n\nexport default function AuthLayout() {\n    // no layout is applied for the auth routes\n    return <Outlet />;\n}\n\n/**\n * If the current session is authenticated, we\'re redirecting the user to the home page.\n * Alternatively, we could also use the `Authenticated` component inside the `AuthLayout` to handle the redirect.\n * But, server-side redirects are more performant.\n */\nexport async function loader({ request }: LoaderArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (authenticated) {\n        throw redirect(redirectTo ?? "/");\n    }\n\n    return {};\n}\n'.trim(),q='\nimport { AuthPage } from "@refinedev/chakra-ui";\n\nexport default function LoginPage() {\n  return <AuthPage type="login" />;\n}\n\n'.trim(),A='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "~/components/pagination";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim(),z='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/chakra-ui";\n\nimport { Heading } from "@chakra-ui/react";\n\nexport default function ProductShow() {\n  const { queryResult } = useShow();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  return (\n      <Show isLoading={isLoading}>\n          <Heading as="h5" size="sm">\n              Id\n          </Heading>\n          <TextField value={record?.id} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Name\n          </Heading>\n          <TextField value={record?.name} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Material\n          </Heading>\n          <TextField value={record?.material} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Description\n          </Heading>\n          <MarkdownField value={record?.description} />\n\n          <Heading as="h5" size="sm" mt={4}>\n              Price\n          </Heading>\n          <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n      </Show>\n  );\n};\n'.trim(),V='\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport default function ProductEdit() {\n  const {\n    refineCore: { formLoading, queryResult, autoSaveProps },\n    saveButtonProps,\n    register,\n    formState: { errors },\n    setValue,\n} = useForm({\n    refineCoreProps: {\n        autoSave: {\n            enabled: true,\n        },\n    },\n});\n\nreturn (\n    <Edit\n        isLoading={formLoading}\n        saveButtonProps={saveButtonProps}\n        autoSaveProps={autoSaveProps}\n    >\n          <FormControl mb="3" isInvalid={!!errors?.name}>\n              <FormLabel>Name</FormLabel>\n              <Input\n                  id="name"\n                  type="text"\n                  {...register("name", { required: "Name is required" })}\n              />\n              <FormErrorMessage>\n                  {`${errors.name?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n          <FormControl mb="3" isInvalid={!!errors?.material}>\n              <FormLabel>Material</FormLabel>\n              <Input\n                  id="material"\n                  type="text"\n                  {...register("material", { required: "Material is required" })}\n              />\n              <FormErrorMessage>\n                  {`${errors.material?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n          <FormControl mb="3" isInvalid={!!errors?.description}>\n              <FormLabel>Description</FormLabel>\n              <Textarea\n                  id="description"\n                  {...register("description", {\n                      required: "Description is required",\n                  })}\n              />\n              <FormErrorMessage>\n                  {`${errors.description?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n          <FormControl mb="3" isInvalid={!!errors?.price}>\n              <FormLabel>Price</FormLabel>\n              <Input\n                  id="price"\n                  type="number"\n                  {...register("price", { required: "Price is required" })}\n              />\n              <FormErrorMessage>\n                  {`${errors.price?.message}`}\n              </FormErrorMessage>\n          </FormControl>\n      </Edit>\n  );\n};\n'.trim(),G='\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport default function ProductCreate() {\n  const {\n      refineCore: { formLoading },\n      saveButtonProps,\n      register,\n      formState: { errors },\n  } = useForm<IPost>();\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n        <FormControl mb="3" isInvalid={!!errors?.name}>\n            <FormLabel>Name</FormLabel>\n            <Input\n                id="name"\n                type="text"\n                {...register("name", { required: "Name is required" })}\n            />\n            <FormErrorMessage>\n                {`${errors.name?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n        <FormControl mb="3" isInvalid={!!errors?.material}>\n            <FormLabel>Material</FormLabel>\n            <Input\n                id="material"\n                type="text"\n                {...register("material", { required: "Material is required" })}\n            />\n            <FormErrorMessage>\n                {`${errors.material?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n        <FormControl mb="3" isInvalid={!!errors?.description}>\n            <FormLabel>Description</FormLabel>\n            <Textarea\n                id="description"\n                {...register("description", {\n                    required: "Description is required",\n                })}\n            />\n            <FormErrorMessage>\n                {`${errors.description?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n        <FormControl mb="3" isInvalid={!!errors?.price}>\n            <FormLabel>Price</FormLabel>\n            <Input\n                id="price"\n                type="number"\n                {...register("price", { required: "Price is required" })}\n            />\n            <FormErrorMessage>\n                {`${errors.price?.message}`}\n            </FormErrorMessage>\n        </FormControl>\n    </Create>\n  );\n};\n'.trim();function U(){return t.createElement(a.x,{showNavigator:!0,initialPercentage:35,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","react-dom":"^18.0.0","react-router":"latest","react-router-dom":"^6.8.1","react-hook-form":"^7.30.0"},startRoute:"/products",files:{"/App.tsx":{code:$,active:!0},"/pages/products/list.tsx":{code:K,hidden:!0},"/components/pagination/index.tsx":{code:j}}})}const j='\nimport React from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        <IconChevronLeft size="18" />\n                    </IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </IconButton>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n',$='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { BrowserRouter, Route, Routes, Outlet } from "react-router-dom";\n\nimport {\n  ThemedLayoutV2,\n  ErrorComponent,\n  RefineThemes,\n  notificationProvider,\n} from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport { ProductList } from "./pages/products/list";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ChakraProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          notificationProvider={notificationProvider}\n          resources={[\n            {\n              name: "products",\n              list: "/products",\n            }\n          ]}\n        >\n          <Routes>\n              <Route\n                // The layout will wrap all the pages inside this route\n                element={\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                }\n              >\n                  <Route path="/products" element={<ProductList />} />\n                  <Route path="*" element={<ErrorComponent />} />\n              </Route>\n          </Routes>\n        </Refine>\n      </ChakraProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),K='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../../components/pagination";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim();function _(){return t.createElement(a.x,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","@refinedev/nextjs-router":"latest"},startRoute:"/products",files:{"/pages/_app.tsx":{code:W,active:!0},"/pages/products/index.tsx":{code:Q,hidden:!0}}})}const W='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport { RefineThemes, ThemedLayoutV2, notificationProvider } from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nfunction App({ Component, pageProps }: AppProps) {\n    return (\n        <ChakraProvider theme={RefineThemes.Blue}>\n          <Refine\n              routerProvider={routerProvider}\n              dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n              notificationProvider={notificationProvider}\n              resources={[\n                  {\n                  name: "products",\n                  list: "/products",\n                  },\n              ]}\n          >\n            <ThemedLayoutV2>\n              <Component {...pageProps} />\n            </ThemedLayoutV2>\n          </Refine>\n        </ChakraProvider>\n    );\n}\n\nexport default App;\n'.trim(),Q='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../../components/pagination";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim();function X(){return t.createElement(a.x,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","@refinedev/remix-router":"latest"},startRoute:"/products",files:{"/app/root.tsx":{code:J},"/app/routes/_layout.tsx":{code:Z,active:!0},"/app/routes/_layout.products._index.tsx":{code:Y,hidden:!0}}})}const J='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { notificationProvider, RefineThemes } from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ChakraProvider theme={RefineThemes.Blue}>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            notificationProvider={notificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n              },\n            ]}\n          >\n            <Outlet />\n          </Refine>\n        </ChakraProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),Z='\nimport { ThemedLayoutV2 } from "@refinedev/chakra-ui";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderArgs, redirect } from "@remix-run/node";\n\n/**\n * Routes starting with `_layout` will have their children rendered inside the layout.\n */\nexport default function Layout() {\n    return (\n        <ThemedLayoutV2>\n            <Outlet />\n        </ThemedLayoutV2>\n    );\n}\n'.trim(),Y='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../components/pagination";\n\nexport default function ProductList() {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim();function ee(){return t.createElement(a.x,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","react-dom":"^18.0.0","react-router":"latest","react-router-dom":"^6.8.1","react-hook-form":"^7.30.0"},startRoute:"/products",files:{"/App.tsx":{code:te,hidden:!0},"/pages/products/index.tsx":{code:ne,hidden:!0},"/pages/products/list.tsx":{code:oe,active:!0},"/pages/products/show.tsx":{code:ae},"/pages/products/edit.tsx":{code:ie},"/pages/products/create.tsx":{code:se},"/components/pagination/index.tsx":{code:re}}})}const ne='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),re='\nimport React from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        <IconChevronLeft size="18" />\n                    </IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </IconButton>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n',te='\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router-v6";\nimport { BrowserRouter, Route, Routes, Outlet } from "react-router-dom";\n\nimport {\n  ThemedLayoutV2,\n  ErrorComponent,\n  RefineThemes,\n  notificationProvider,\n} from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ChakraProvider theme={RefineThemes.Blue}>\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider(\n                "https://api.fake-rest.refine.dev",\n            )}\n            notificationProvider={notificationProvider}\n            resources={[\n                {\n                    name: "products",\n                    list: "/products",\n                    show: "/products/:id",\n                    edit: "/products/:id/edit",\n                    create: "/products/create",\n                    meta: {\n                        canDelete: true,\n                    },\n                },\n            ]}\n            options={{\n                syncWithLocation: true,\n            }}\n        >\n            <Routes>\n                <Route\n                    element={\n                        <ThemedLayoutV2>\n                            <Outlet />\n                        </ThemedLayoutV2>\n                    }\n                >\n                    <Route index element={<NavigateToResource resource="products" />} />\n                    <Route path="/products" element={<Outlet />}>\n                      <Route index element={<ProductList />} />\n                      <Route path="create" element={<ProductCreate />} />\n                      <Route path=":id" element={<ProductShow />} />\n                      <Route path=":id/edit" element={<ProductEdit />} />\n                    </Route>\n                    <Route path="*" element={<ErrorComponent />} />\n                </Route>\n            </Routes>\n        </Refine>\n      </ChakraProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),oe='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../../components/pagination";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim(),ae='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/chakra-ui";\n\nimport { Heading } from "@chakra-ui/react";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Heading as="h5" size="sm">\n                Id\n            </Heading>\n            <TextField value={record?.id} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Name\n            </Heading>\n            <TextField value={record?.name} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Material\n            </Heading>\n            <TextField value={record?.material} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Description\n            </Heading>\n            <MarkdownField value={record?.description} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Price\n            </Heading>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),ie='\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductEdit = () => {\n    const {\n        refineCore: { formLoading, queryResult, autoSaveProps },\n        saveButtonProps,\n        register,\n        formState: { errors },\n        setValue,\n    } = useForm({\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n    });\n\n    return (\n        <Edit\n            isLoading={formLoading}\n            saveButtonProps={saveButtonProps}\n            autoSaveProps={autoSaveProps}\n        >\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Edit>\n    );\n};\n'.trim(),se='\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm<IPost>();\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Create>\n    );\n};\n'.trim();function de(){return t.createElement(a.x,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","react-dom":"^18.0.0","react-router":"latest","react-router-dom":"^6.8.1","react-hook-form":"^7.30.0"},startRoute:"/login",files:{"/App.tsx":{code:ce,hidden:!0},"/pages/products.tsx":{code:me,hidden:!0},"/pages/login.tsx":{code:le,active:!0},"/pages/register.tsx":{code:pe},"/pages/forgot-password.tsx":{code:he},"/pages/reset-password.tsx":{code:fe},"/auth-provider.tsx":{code:ue,hidden:!0}}})}const ue='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),ce='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router-v6";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router-dom";\n\nimport { ErrorComponent, RefineThemes, ThemedLayoutV2, notificationProvider, AuthPage } from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList } from "./pages/products";\nimport { LoginPage } from "./pages/login";\nimport { RegisterPage } from "./pages/register";\nimport { ForgotPasswordPage } from "./pages/forgot-password";\nimport { ResetPasswordPage } from "./pages/reset-password";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ChakraProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          authProvider={authProvider}\n          notificationProvider={notificationProvider}\n          resources={[\n            {\n              name: "products",\n              list: "/products",\n            }\n          ]}\n          options={{ syncWithLocation: true }}\n        >\n          <Routes>\n            <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n              <Route\n                element={\n                  <ThemedLayoutV2>\n                    <Outlet />\n                  </ThemedLayoutV2>\n                }\n              >\n                <Route path="/products" element={<ProductList />} />\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Route>\n            <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n              <Route path="/login" element={<LoginPage />} />\n              <Route path="/register" element={<RegisterPage />} />\n              <Route path="/forgot-password" element={<ForgotPasswordPage />} />\n              <Route path="/reset-password" element={<ResetPasswordPage />} />\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </ChakraProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),me='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n        </List>\n    );\n};\n'.trim(),le='\nimport { AuthPage } from "@refinedev/chakra-ui";\n\nexport const LoginPage = () => {\n    return (\n        <AuthPage\n            type="login"\n            formProps={{\n                defaultValues: {\n                  email: "demo@refine.dev",\n                  password: "demodemo",\n                },\n            }}\n        />\n    );\n};\n'.trim(),pe='\nimport { AuthPage } from "@refinedev/chakra-ui";\n\nexport const RegisterPage = () => {\n    return <AuthPage type="register" />;\n};\n'.trim(),he='\nimport { AuthPage } from "@refinedev/chakra-ui";\n\nexport const ForgotPasswordPage = () => {\n    return <AuthPage type="forgotPassword" />;\n};\n'.trim(),fe='\nimport { AuthPage } from "@refinedev/chakra-ui";\n\nexport const ResetPasswordPage = () => {\n    return <AuthPage type="resetPassword" />;\n};\n'.trim();function ge(){return t.createElement(a.x,{showNavigator:!0,layout:"col",height:320,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons":"^1.119.0","@refinedev/core":"^4.45.1","@refinedev/react-router-v6":"^4.5.4","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","react-dom":"^18.0.0","react-router":"latest","react-router-dom":"^6.8.1","react-hook-form":"^7.30.0"},startRoute:"/products",files:{"/App.tsx":{code:ye,hidden:!0},"/theme-provider.tsx":{code:Ce,active:!0},"/pages/products/index.tsx":{code:be,hidden:!0},"/pages/products/list.tsx":{code:Pe,hidden:!0},"/pages/products/show.tsx":{code:xe,hidden:!0},"/pages/products/edit.tsx":{code:Te,hidden:!0},"/pages/products/create.tsx":{code:we,hidden:!0},"/components/pagination/index.tsx":{code:ke,hidden:!0},"/auth-provider.tsx":{code:ve,hidden:!0}}})}const ve='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),ke='\nimport React from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        <IconChevronLeft size="18" />\n                    </IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </IconButton>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n',be='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),Ce='\nimport { RefineThemes } from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\n\nexport const ThemeProvider = ({ children }) => (\n    // Available themes: Blue, Purple, Magenta, Red, Orange, Yellow, Green\n    // Change the line below to change the theme\n    <ChakraProvider theme={RefineThemes.Magenta}>\n      {children}\n    </ChakraProvider>\n);\n'.trim(),ye='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router-v6";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router-dom";\n\nimport {\n  ThemedLayoutV2,\n  ErrorComponent,\n  notificationProvider,\n  AuthPage,\n} from "@refinedev/chakra-ui";\n\nimport { ThemeProvider } from "./theme-provider";\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(\n                    "https://api.fake-rest.refine.dev",\n                )}\n                notificationProvider={notificationProvider}\n                authProvider={authProvider}\n                resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        show: "/products/:id",\n                        edit: "/products/:id/edit",\n                        create: "/products/create",\n                        meta: {\n                            canDelete: true,\n                        },\n                    },\n                ]}\n                options={{\n                    syncWithLocation: true,\n                }}\n            >\n                <Routes>\n                  <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                    <Route\n                        element={\n                            <ThemedLayoutV2>\n                                <Outlet />\n                            </ThemedLayoutV2>\n                        }\n                    >\n                        <Route index element={<NavigateToResource resource="products" />} />\n                        <Route path="/products" element={<Outlet />}>\n                          <Route index element={<ProductList />} />\n                          <Route path="create" element={<ProductCreate />} />\n                          <Route path=":id" element={<ProductShow />} />\n                          <Route path=":id/edit" element={<ProductEdit />} />\n                        </Route>\n                        <Route path="*" element={<ErrorComponent />} />\n                    </Route>\n                  </Route>\n                  <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                    <Route\n                      path="/login"\n                      element={(\n                        <AuthPage\n                          type="login"\n                          formProps={{\n                            defaultValues: {\n                              email: "demo@refine.dev",\n                              password: "demodemo",\n                            },\n                          }}\n                        />\n                      )}\n                    />\n                    <Route path="/register" element={<AuthPage type="register" />} />\n                    <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                    <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                    <Route path="*" element={<ErrorComponent />} />\n                  </Route>\n                </Routes>\n            </Refine>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),Pe='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n    DateField,\n} from "@refinedev/chakra-ui";\n\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\n\nimport { Pagination } from "../../components/pagination";\n\nexport const ProductList = () => {\n    const columns = React.useMemo(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        <Text>\n                                            {flexRender(\n                                                header.column.columnDef\n                                                    .header,\n                                                header.getContext(),\n                                            )}\n                                        </Text>\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n'.trim(),xe='\nimport { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/chakra-ui";\n\nimport { Heading } from "@chakra-ui/react";\n\nexport const ProductShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    return (\n        <Show isLoading={isLoading}>\n            <Heading as="h5" size="sm">\n                Id\n            </Heading>\n            <TextField value={record?.id} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Name\n            </Heading>\n            <TextField value={record?.name} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Material\n            </Heading>\n            <TextField value={record?.material} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Description\n            </Heading>\n            <MarkdownField value={record?.description} />\n\n            <Heading as="h5" size="sm" mt={4}>\n                Price\n            </Heading>\n            <NumberField value={record?.price}  options={{ style: "currency", currency: "USD" }} />\n        </Show>\n    );\n};\n'.trim(),Te='\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductEdit = () => {\n    const {\n        refineCore: { formLoading, queryResult, autoSaveProps },\n        saveButtonProps,\n        register,\n        formState: { errors },\n        setValue,\n    } = useForm({\n        refineCoreProps: {\n            autoSave: {\n                enabled: true,\n            },\n        },\n    });\n\n    return (\n        <Edit\n            isLoading={formLoading}\n            saveButtonProps={saveButtonProps}\n            autoSaveProps={autoSaveProps}\n        >\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Edit>\n    );\n};\n'.trim(),we='\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm<IPost>();\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.price?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Create>\n    );\n};\n'.trim();function Fe(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function Re(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})),e}function Le(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const Ie={title:"Introduction"},Ne=void 0,Ee={unversionedId:"ui-integrations/chakra-ui/introduction/index",id:"ui-integrations/chakra-ui/introduction/index",title:"Introduction",description:"Refine provides an integration package for Chakra UI framework. This package provides a set of ready to use components and hooks that connects Refine with Chakra UI components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Chakra UI package, you will be able to use all the features of Chakra UI in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Chakra UI components in combination with Refine's features and functionalities.",source:"@site/docs/ui-integrations/chakra-ui/introduction/index.md",sourceDirName:"ui-integrations/chakra-ui/introduction",slug:"/ui-integrations/chakra-ui/introduction/",permalink:"/docs/ui-integrations/chakra-ui/introduction/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/ui-integrations/chakra-ui/introduction/index.md",tags:[],version:"current",lastUpdatedBy:"Necati \xd6zmen",lastUpdatedAt:1702307094,formattedLastUpdatedAt:"Dec 11, 2023",frontMatter:{title:"Introduction"},sidebar:"mainSidebar",previous:{title:"Migration Guide",permalink:"/docs/ui-integrations/material-ui/migration-guide/"},next:{title:"<ThemedLayout>",permalink:"/docs/ui-integrations/chakra-ui/components/themed-layout/"}},Me={},Se=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Tables",id:"tables",level:2},{value:"Forms",id:"forms",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Predefined Components and Views",id:"predefined-components-and-views",level:2},{value:"Layouts, Menus and Breadcrumbs",id:"layouts-menus-and-breadcrumbs",level:3},{value:"Buttons",id:"buttons",level:3},{value:"Views",id:"views",level:3},{value:"Fields",id:"fields",level:3},{value:"Auth Pages",id:"auth-pages",level:3},{value:"Error Components",id:"error-components",level:3},{value:"Theming",id:"theming",level:2},{value:"Inferencer",id:"inferencer",level:2}],Be=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},De=Be("Tabs"),He=Be("TabItem"),Oe={toc:Se};function qe(e){var{components:n}=e,r=Le(e,["components"]);return(0,o.kt)("wrapper",Re(function(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},t=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),t.forEach((function(n){Fe(e,n,r[n])}))}return e}({},Oe,r),{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Refine provides an integration package for ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/"},"Chakra UI")," framework. This package provides a set of ready to use components and hooks that connects Refine with Chakra UI components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Chakra UI package, you will be able to use all the features of Chakra UI in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Chakra UI components in combination with Refine's features and functionalities."),(0,o.kt)(i,{mdxType:"Example"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Installing the package is as simple as just by running the following command without any additional configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @refinedev/chakra-ui @chakra-ui/react @refinedev/react-table @refinedev/react-hook-form @tanstack/react-table react-hook-form @tabler/icons@1\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"We'll wrap our app with the ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/getting-started"},(0,o.kt)("inlineCode",{parentName:"a"},"<ChakraProvider />"))," to make sure we have the theme available for our app, then we'll use the layout components to wrap them around our routes. Check out the examples below to see how to use Refine's Chakra UI integration."),(0,o.kt)(De,{wrapContent:!1,mdxType:"Tabs"},(0,o.kt)(He,{value:"react-router-dom",label:"React Router v6",mdxType:"TabItem"},(0,o.kt)(f,{mdxType:"UsageReactRouterDom"})),(0,o.kt)(He,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.kt)(T,{mdxType:"UsageNextJs"})),(0,o.kt)(He,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.kt)(S,{mdxType:"UsageRemix"}))),(0,o.kt)("h2",{id:"tables"},"Tables"),(0,o.kt)("p",null,"Chakra UI offers styled ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/table"},"table primitives")," but lacks the table management solution. Refine recommends using ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.kt)("inlineCode",{parentName:"a"},"@refinedev/react-table"))," package which is built on top of Refine's ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/use-table"},(0,o.kt)("inlineCode",{parentName:"a"},"useTable"))," hook and Tanstack Table's ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/adapters/react-table"},(0,o.kt)("inlineCode",{parentName:"a"},"useTable"))," hook to enable features from pagination to sorting and filtering. Refine's documentations and examples of Chakra UI uses ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/react-table")," package for table management but you have the option to use any table management solution you want."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'import React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport { List, ShowButton, EditButton, DeleteButton, DateField } from "@refinedev/chakra-ui";\n\nimport { Table, Thead, Tbody, Tr, Th, Td, TableContainer, HStack, Text } from "@chakra-ui/react";\n\nimport { Pagination } from "../../components/pagination";\n\nconst columns = [\n  { id: "id", header: "ID", accessorKey: "id" },\n  { id: "name", header: "Name", accessorKey: "name", meta: { filterOperator: "contains" } },\n  { id: "price", header: "Price", accessorKey: "price" },\n  {\n    id: "actions",\n    header: "Actions",\n    accessorKey: "id",\n    enableColumnFilter: false,\n    enableSorting: false,\n    cell: function render({ getValue }) {\n      return (\n        <HStack>\n          <ShowButton hideText size="sm" recordItemId={getValue() as number} />\n          <EditButton hideText size="sm" recordItemId={getValue() as number} />\n          <DeleteButton hideText size="sm" recordItemId={getValue() as number} />\n        </HStack>\n      );\n    },\n  },\n];\n\nexport const ProductList = () => {\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQueryResult: { data: tableData },\n    },\n  } = useTable<IProduct>({\n    columns,\n    refineCoreProps: {\n      initialSorter: [\n        {\n          field: "id",\n          order: "desc",\n        },\n      ],\n    },\n  });\n\n  return (\n    <List>\n      <TableContainer whiteSpace="pre-line">\n        <Table variant="simple">\n          <Thead>\n            {getHeaderGroups().map((headerGroup) => (\n              <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <Th key={header.id}>\n                    <Text>{flexRender(header.column.columnDef.header, header.getContext())}</Text>\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n          </Thead>\n          <Tbody>\n            {getRowModel().rows.map((row) => (\n              <Tr key={row.id}>\n                {row.getVisibleCells().map((cell) => (\n                  <Td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</Td>\n                ))}\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </TableContainer>\n      <Pagination current={current} pageCount={pageCount} setCurrent={setCurrent} />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Pagination />")," component is a custom component that is used to render the pagination controls which uses ",(0,o.kt)("inlineCode",{parentName:"p"},"usePagination")," hook from ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/chakra-ui")," package. This hook accepts the pagination values from ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," hook and returns the pagination controls and related props."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Pagination Component"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/pagination.tsx"',title:'"components/pagination.tsx"'},'import React from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n  current: number;\n  pageCount: number;\n  setCurrent: (page: number) => void;\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({ current, pageCount, setCurrent }) => {\n  const pagination = usePagination({\n    current,\n    pageCount,\n  });\n\n  return (\n    <Box display="flex" justifyContent="flex-end">\n      <HStack my="3" spacing="1">\n        {pagination?.prev && (\n          <IconButton\n            aria-label="previous page"\n            onClick={() => setCurrent(current - 1)}\n            disabled={!pagination?.prev}\n            variant="outline"\n          >\n            <IconChevronLeft size="18" />\n          </IconButton>\n        )}\n\n        {pagination?.items.map((page) => {\n          if (typeof page === "string") return <span key={page}>...</span>;\n\n          return (\n            <Button key={page} onClick={() => setCurrent(page)} variant={page === current ? "solid" : "outline"}>\n              {page}\n            </Button>\n          );\n        })}\n        {pagination?.next && (\n          <IconButton aria-label="next page" onClick={() => setCurrent(current + 1)} variant="outline">\n            <IconChevronRight size="18" />\n          </IconButton>\n        )}\n      </HStack>\n    </Box>\n  );\n};\n'))),(0,o.kt)("h2",{id:"forms"},"Forms"),(0,o.kt)("p",null,"Chakra UI offers ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/input"},"form elements")," yet it does not provide a form management solution. To have a complete solution, Refine recommends using ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.kt)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," package which is built on top of Refine's ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/use-form/"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," hook and React Hook Form's ",(0,o.kt)("a",{parentName:"p",href:"https://react-hook-form.com/docs/useform"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," hook."),(0,o.kt)("p",null,"Refine's documentations and examples of Chakra UI uses ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," package for form management but you have the option to use any form management solution you want."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/create.tsx"',title:'"pages/products/create.tsx"'},'import { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm<IPost>();\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name", { required: "Name is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material", { required: "Material is required" })}\n                />\n                <FormErrorMessage>\n                    {\\`$\\{errors.material?.message}\\`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description", {\n                        required: "Description is required",\n                    })}\n                />\n                <FormErrorMessage>\n                    {\\`$\\{errors.description?.message}\\`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.price}>\n                <FormLabel>Price</FormLabel>\n                <Input\n                    id="price"\n                    type="number"\n                    {...register("price", { required: "Price is required" })}\n                />\n                <FormErrorMessage>\n                    {\\`$\\{errors.price?.message}\\`}\n                </FormErrorMessage>\n            </FormControl>\n        </Create>\n    );\n};\n')),(0,o.kt)("p",null,"Additional hooks of ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," such as ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.kt)("inlineCode",{parentName:"a"},"useStepsForm"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.kt)("inlineCode",{parentName:"a"},"useModalForm"))," can also be used together with Refine's Chakra UI integration with ease."),(0,o.kt)("h2",{id:"notifications"},"Notifications"),(0,o.kt)("p",null,"Chakra UI has its own ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/toast"},"notification system")," which works seamlessly with its UI elements. Refine also provides a seamless integration with Chakra UI's notification system and show notifications for related actions and events. This integration is provided by the ",(0,o.kt)("inlineCode",{parentName:"p"},"notificationProvider")," hook exported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/chakra-ui")," package which can be directly used in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/refine-component#notificationprovider"},(0,o.kt)("inlineCode",{parentName:"a"},"notificationProvider"))," prop of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { Refine } from "@refinedev/core";\nimport { notificationProvider } from "@refinedev/chakra-ui";\n\nconst App = () => {\n  return (\n    <Refine\n      // ...\n      notificationProvider={notificationProvider}\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n')),(0,o.kt)("h2",{id:"predefined-components-and-views"},"Predefined Components and Views"),(0,o.kt)("h3",{id:"layouts-menus-and-breadcrumbs"},"Layouts, Menus and Breadcrumbs"),(0,o.kt)("p",null,"Refine provides Layout components that can be used to implement a layout for the application. These components are crafted using Chakra UI's components and includes Refine's features and functionalities such as navigation menus, headers, authentication, authorization and more."),(0,o.kt)(De,{wrapContent:!1,mdxType:"Tabs"},(0,o.kt)(He,{value:"react-router-dom",label:"React Router v6",mdxType:"TabItem"},(0,o.kt)(U,{mdxType:"LayoutReactRouterDom"})),(0,o.kt)(He,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.kt)(_,{mdxType:"LayoutNextJs"})),(0,o.kt)(He,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.kt)(X,{mdxType:"LayoutRemix"}))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/themed-layout"},(0,o.kt)("inlineCode",{parentName:"a"},"<ThemedLayoutV2 />"))," component consists of a header, sider and a content area. The sider have a navigation menu items for the defined resources of Refine, if an authentication provider is present, it will also have a functional logout buttun. The header contains the app logo and name and also information about the current user if an authentication provider is present."),(0,o.kt)("p",null,"Additionally, Refine also provides a ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/breadcrumb"},(0,o.kt)("inlineCode",{parentName:"a"},"<Breadcrumb />"))," component that uses the Chakra UI's component as a base and provide appropriate breadcrumbs for the current route. This component is used in the basic views provided by Refine's Chakra UI package automatically."),(0,o.kt)("h3",{id:"buttons"},"Buttons"),(0,o.kt)("p",null,"Refine's Chakra UI integration offers variety of buttons that are built above the ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/button"},(0,o.kt)("inlineCode",{parentName:"a"},"<Button />"))," component of Chakra UI and includes many logical functionalities such as;"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Authorization checks"),(0,o.kt)("li",{parentName:"ul"},"Confirmation dialogs"),(0,o.kt)("li",{parentName:"ul"},"Loading states"),(0,o.kt)("li",{parentName:"ul"},"Invalidation"),(0,o.kt)("li",{parentName:"ul"},"Navigation"),(0,o.kt)("li",{parentName:"ul"},"Form actions"),(0,o.kt)("li",{parentName:"ul"},"Import/Export and more.")),(0,o.kt)("p",null,"You can use buttons such as ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/edit-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton />"))," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/list-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton />"))," etc. in your views to provide navigation for the related routes or ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton />"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/save-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<SaveButton />"))," etc. to perform related actions without having to worry about the authorization checks and other logical functionalities."),(0,o.kt)("p",null,"An example usage of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<EditButton />")," component is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'import React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport { List, EditButton, DateField } from "@refinedev/chakra-ui";\n\nimport { Table, Thead, Tbody, Tr, Th, Td, TableContainer, HStack, Text } from "@chakra-ui/react";\n\nconst columns = [\n  { id: "id", header: "ID", accessorKey: "id" },\n  { id: "name", header: "Name", accessorKey: "name", meta: { filterOperator: "contains" } },\n  { id: "price", header: "Price", accessorKey: "price" },\n  {\n    id: "actions",\n    header: "Actions",\n    accessorKey: "id",\n    cell: function render({ getValue }) {\n      return (\n        {/* highlight-next-line */}\n        <EditButton hideText size="sm" recordItemId={getValue() as number} />\n      );\n    },\n  },\n];\n\nexport const ProductList = () => {\n  const table = useTable<IProduct>({ columns });\n\n  return ( /* ... */ );\n};\n')),(0,o.kt)("p",null,"The list of provided buttons are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/create-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<CreateButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/edit-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/list-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/show-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ShowButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/clone-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<CloneButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/save-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<SaveButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/refresh-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefreshButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/import-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ImportButton />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/buttons/export-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<ExportButton />")))),(0,o.kt)("p",null,"Many of these buttons are already used in the views provided by Refine's Chakra UI integration. If you're using the basic view elements provided by Refine, you will have the appropriate buttons placed in your application out of the box."),(0,o.kt)("h3",{id:"views"},"Views"),(0,o.kt)("p",null,"Views are designed as wrappers around the content of the pages in the application. They are designed to be used within the layouts and provide basic functionalities such as titles based on the resource, breadcrumbs, related actions and authorization checks. Refine's Chakra UI integration uses components such as ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box"},(0,o.kt)("inlineCode",{parentName:"a"},"<Box />"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/heading"},(0,o.kt)("inlineCode",{parentName:"a"},"<Heading />"))," to provide these views and provides customization options by passing related props to these components."),(0,o.kt)("p",null,"The list of provided views are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/basic-views/create"},(0,o.kt)("inlineCode",{parentName:"a"},"<List />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/basic-views/show"},(0,o.kt)("inlineCode",{parentName:"a"},"<Show />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/basic-views/edit"},(0,o.kt)("inlineCode",{parentName:"a"},"<Edit />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/basic-views/create"},(0,o.kt)("inlineCode",{parentName:"a"},"<Create />")))),(0,o.kt)(ee,{mdxType:"BasicViews"}),(0,o.kt)("h3",{id:"fields"},"Fields"),(0,o.kt)("p",null,"Refine's Material UI also provides field components to render values with appropriate design and format of Material UI. These components are built on top of respective Material UI components and also provide logic for formatting of the values. While these components might not always be suitable for your use case, they can be combined or extended to provide the desired functionality."),(0,o.kt)("p",null,"The list of provided field components are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/boolean-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<BooleanField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/date-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<DateField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/email-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<EmailField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/file-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<FileField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/markdown-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<MarkdownField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/number-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<NumberField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/tag-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<TagField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/text-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<TextField />"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/ui-integrations/chakra-ui/components/fields/url-field"},(0,o.kt)("inlineCode",{parentName:"a"},"<UrlField />")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/show.tsx"',title:'"pages/products/show.tsx"'},'import { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField, MarkdownField } from "@refinedev/chakra-ui";\nimport { Heading } from "@chakra-ui/react";\n\nexport const ProductShow = () => {\n  const { queryResult } = useShow();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  return (\n    <Show isLoading={isLoading}>\n      <Heading as="h5" size="sm">\n        Id\n      </Heading>\n      {/* highlight-next-line */}\n      <TextField value={record?.id} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Name\n      </Heading>\n      {/* highlight-next-line */}\n      <TextField value={record?.name} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Material\n      </Heading>\n      {/* highlight-next-line */}\n      <TextField value={record?.material} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Description\n      </Heading>\n      {/* highlight-next-line */}\n      <MarkdownField value={record?.description} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Price\n      </Heading>\n      {/* highlight-next-line */}\n      <NumberField value={record?.price} options={{ style: "currency", currency: "USD" }} />\n    </Show>\n  );\n};\n')),(0,o.kt)("h3",{id:"auth-pages"},"Auth Pages"),(0,o.kt)("p",null,"Auth pages are designed to be used as the pages of the authentication flow of the application. They offer an out of the box solution for the login, register, forgot password and reset password pages by leveraging the authentication hooks of Refine. Auth page components are built on top of basic Chakra UI components such as ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/input"},(0,o.kt)("inlineCode",{parentName:"a"},"<Input />"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/card"},(0,o.kt)("inlineCode",{parentName:"a"},"<Card />"))," etc."),(0,o.kt)("p",null,"The list of types of auth pages that are available in the UI integrations are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="login" />')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="register" />')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="forgot-password" />')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'<AuthPage type="reset-password" />'))),(0,o.kt)("p",null,"An example usage of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/auth-page"},(0,o.kt)("inlineCode",{parentName:"a"},"<AuthPage />"))," component is as follows:"),(0,o.kt)(de,{mdxType:"AuthPage"}),(0,o.kt)("h3",{id:"error-components"},"Error Components"),(0,o.kt)("p",null,"Refine's Chakra UI integration also provides an ",(0,o.kt)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component that you can use to render a 404 page in your app. While these components does not offer much functionality, they are provided as an easy way to render an error page with a consistent design language."),(0,o.kt)("p",null,"An example usage of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/404.tsx"',title:'"pages/404.tsx"'},'import { ErrorComponent } from "@refinedev/chakra-ui";\n\nconst NotFoundPage = () => {\n  return <ErrorComponent />;\n};\n')),(0,o.kt)("h2",{id:"theming"},"Theming"),(0,o.kt)("p",null,"Since Refine offers application level components such as layout, sidebar and header and page level components for each action, it is important to have it working with the styling of Chakra UI. All components and providers exported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/chakra-ui")," package will use the current theme of Chakra UI without any additional configuration."),(0,o.kt)("p",null,"Additionally, Refine also provides a set of carefully crafted themes for Chakra UI which outputs a nice UI with Refine's components with light and dark theme support. These themes are exported as ",(0,o.kt)("inlineCode",{parentName:"p"},"RefineThemes")," object from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/chakra-ui")," package and can be used in ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/getting-started"},(0,o.kt)("inlineCode",{parentName:"a"},"<ChakraProvider />"))," component of Chakra UI."),(0,o.kt)(ge,{mdxType:"Theming"}),(0,o.kt)("p",null,"To learn more about the theme configuration of Chakra UI, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/styled-system/customize-theme"},"official documentation"),"."),(0,o.kt)("h2",{id:"inferencer"},"Inferencer"),(0,o.kt)("p",null,"You can automatically generate views for your resources using ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/inferencer"),". Inferencer exports the ",(0,o.kt)("inlineCode",{parentName:"p"},"ChakraListInferencer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ChakraShowInferencer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ChakraEditInferencer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ChakraCreateInferencer")," components and finally the ",(0,o.kt)("inlineCode",{parentName:"p"},"ChakraInferencer")," component, which combines all in one place."),(0,o.kt)("p",null,"To learn more about Inferencer, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/inferencer"},"Material UI Inferencer")," docs."))}qe.isMDXComponent=!0}}]);