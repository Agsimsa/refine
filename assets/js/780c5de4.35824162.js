"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[97270],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>N,frontMatter:()=>i,metadata:()=>u,toc:()=>d});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const i={title:"useDrawerForm"},s=void 0,u={unversionedId:"ui-integrations/mantine/hooks/use-drawer-form/index",id:"ui-integrations/mantine/hooks/use-drawer-form/index",title:"useDrawerForm",description:"The useModalForm hook allows you to manage a form within a ` as well as a . It provides some useful methods to handle the form  or form `.",source:"@site/docs/ui-integrations/mantine/hooks/use-drawer-form/index.md",sourceDirName:"ui-integrations/mantine/hooks/use-drawer-form",slug:"/ui-integrations/mantine/hooks/use-drawer-form/",permalink:"/docs/ui-integrations/mantine/hooks/use-drawer-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/ui-integrations/mantine/hooks/use-drawer-form/index.md",tags:[],version:"current",lastUpdatedBy:"Gianfranc\xf8 Null",lastUpdatedAt:1704877882,formattedLastUpdatedAt:"Jan 10, 2024",frontMatter:{title:"useDrawerForm"},sidebar:"mainSidebar",previous:{title:"useForm",permalink:"/docs/ui-integrations/mantine/hooks/use-form/"},next:{title:"useModalForm",permalink:"/docs/ui-integrations/mantine/hooks/use-modal-form/"}},p={},d=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"refineCoreProps",id:"refinecoreprops",level:3},{value:"initialValues",id:"initialvalues",level:3},{value:"defaultVisible",id:"defaultvisible",level:3},{value:"autoSubmitClose",id:"autosubmitclose",level:3},{value:"autoResetForm",id:"autoresetform",level:3},{value:"syncWithLocation",id:"syncwithlocation",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"autoSave",id:"autosave",level:3},{value:"enabled",id:"enabled",level:4},{value:"debounce",id:"debounce",level:4},{value:"invalidateOnUnmount",id:"invalidateonunmount",level:4},{value:"invalidateOnClose",id:"invalidateonclose",level:4},{value:"Return Values",id:"return-values",level:2},{value:"visible",id:"visible",level:3},{value:"title",id:"title",level:3},{value:"close",id:"close",level:3},{value:"submit",id:"submit",level:3},{value:"show",id:"show",level:3},{value:"saveButtonProps",id:"savebuttonprops",level:3},{value:"overtime",id:"overtime",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=m("Tabs"),k=m("TabItem"),h=m("CodeSandboxExample"),f={toc:d};function N(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},f,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-modal-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useModalForm"))," hook allows you to manage a form within a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," as well as a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),". It provides some useful methods to handle the form ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," or form ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),"."),(0,a.kt)("p",null,"We will use ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-modal-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useModalForm"))," hook as a ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," to manage a form within a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," hook is extended from the ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/mantine"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/mantine"))," package. This means that you can use all the features of ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"We will show two examples, one for creating and one for editing a post. Let's see how ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," is used in both."),(0,a.kt)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"}],mdxType:"Tabs"},(0,a.kt)(k,{value:"create",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"')," a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { Box, Drawer, Group, Pagination, ScrollArea, Select, Table, TextInput } from "@mantine/core";\nimport {\n  List,\n  SaveButton,\n  // highlight-next-line\n  useModalForm as useDrawerForm,\n} from "@refinedev/mantine";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport React from "react";\n\nconst PostList: React.FC = () => {\n  // highlight-start\n  const {\n    getInputProps,\n    saveButtonProps,\n    modal: { show, close, title, visible },\n  } = useDrawerForm({\n    refineCoreProps: { action: "create" },\n    initialValues: {\n      title: "",\n      status: "",\n      content: "",\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n      status: (value) => (value.length <= 0 ? "Status is required" : null),\n    },\n  });\n  // highlight-end\n\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n        meta: {\n          filterOperator: "contains",\n        },\n      },\n      {\n        id: "status",\n        header: "Status",\n        accessorKey: "status",\n        meta: {\n          filterElement: function render(props: FilterElementProps) {\n            return (\n              <Select\n                defaultValue="published"\n                data={[\n                  { label: "Published", value: "published" },\n                  { label: "Draft", value: "draft" },\n                  { label: "Rejected", value: "rejected" },\n                ]}\n                {...props}\n              />\n            );\n          },\n          filterOperator: "eq",\n        },\n      },\n    ],\n    [],\n  );\n\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQueryResult: { data: tableData },\n    },\n  } = useTable({\n    columns,\n  });\n\n  return (\n    <>\n      {/* highlight-start */}\n      <Drawer opened={visible} onClose={close} title={title} padding="xl" size="xl" position="right">\n        <TextInput mt={8} label="Title" placeholder="Title" {...getInputProps("title")} />\n        <Select\n          mt={8}\n          label="Status"\n          placeholder="Pick one"\n          data={[\n            { label: "Published", value: "published" },\n            { label: "Draft", value: "draft" },\n            { label: "Rejected", value: "rejected" },\n          ]}\n          {...getInputProps("status")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n          <SaveButton {...saveButtonProps} />\n        </Box>\n      </Drawer>\n      {/* highlight-end */}\n      <ScrollArea>\n        {/* highlight-next-line */}\n        <List createButtonProps={{ onClick: () => show() }}>\n          <Table highlightOnHover>\n            <thead>\n              {getHeaderGroups().map((headerGroup) => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <th key={header.id}>\n                        {!header.isPlaceholder && (\n                          <Group spacing="xs" noWrap>\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                          </Group>\n                        )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {getRowModel().rows.map((row) => {\n                return (\n                  <tr key={row.id}>\n                    {row.getVisibleCells().map((cell) => {\n                      return <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>;\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n          <br />\n          <Pagination position="right" total={pageCount} page={current} onChange={setCurrent} />\n        </List>\n      </ScrollArea>\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineMantineDemo />);\n'))),(0,a.kt)(k,{value:"edit",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { Box, Drawer, Group, Pagination, ScrollArea, Select, Table, TextInput } from "@mantine/core";\nimport {\n  EditButton,\n  List,\n  SaveButton,\n  // highlight-next-line\n  useModalForm as useDrawerForm,\n} from "@refinedev/mantine";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport React from "react";\n\nconst PostList: React.FC = () => {\n  // highlight-start\n  const {\n    getInputProps,\n    saveButtonProps,\n    modal: { show, close, title, visible },\n  } = useDrawerForm({\n    refineCoreProps: { action: "edit" },\n    initialValues: {\n      title: "",\n      status: "",\n      content: "",\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n      status: (value) => (value.length <= 0 ? "Status is required" : null),\n    },\n  });\n  // highlight-end\n\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n        meta: {\n          filterOperator: "contains",\n        },\n      },\n      {\n        id: "status",\n        header: "Status",\n        accessorKey: "status",\n        meta: {\n          filterElement: function render(props: FilterElementProps) {\n            return (\n              <Select\n                defaultValue="published"\n                data={[\n                  { label: "Published", value: "published" },\n                  { label: "Draft", value: "draft" },\n                  { label: "Rejected", value: "rejected" },\n                ]}\n                {...props}\n              />\n            );\n          },\n          filterOperator: "eq",\n        },\n      },\n      {\n        id: "actions",\n        header: "Actions",\n        accessorKey: "id",\n        enableColumnFilter: false,\n        enableSorting: false,\n        cell: function render({ getValue }) {\n          return (\n            <Group spacing="xs" noWrap>\n              {/* highlight-start */}\n              <EditButton hideText onClick={() => show(getValue() as number)} />\n              {/* highlight-end */}\n            </Group>\n          );\n        },\n      },\n    ],\n    [],\n  );\n\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQueryResult: { data: tableData },\n    },\n  } = useTable({\n    columns,\n  });\n\n  return (\n    <>\n      {/* highlight-start */}\n      <Drawer opened={visible} onClose={close} title={title} padding="xl" size="xl" position="right">\n        <TextInput mt={8} label="Title" placeholder="Title" {...getInputProps("title")} />\n        <Select\n          mt={8}\n          label="Status"\n          placeholder="Pick one"\n          data={[\n            { label: "Published", value: "published" },\n            { label: "Draft", value: "draft" },\n            { label: "Rejected", value: "rejected" },\n          ]}\n          {...getInputProps("status")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n          <SaveButton {...saveButtonProps} />\n        </Box>\n      </Drawer>\n      {/* highlight-end */}\n      <ScrollArea>\n        <List>\n          <Table highlightOnHover>\n            <thead>\n              {getHeaderGroups().map((headerGroup) => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <th key={header.id}>\n                        {!header.isPlaceholder && (\n                          <Group spacing="xs" noWrap>\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                          </Group>\n                        )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {getRowModel().rows.map((row) => {\n                return (\n                  <tr key={row.id}>\n                    {row.getVisibleCells().map((cell) => {\n                      return <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>;\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n          <br />\n          <Pagination position="right" total={pageCount} page={current} onChange={setCurrent} />\n        </List>\n      </ScrollArea>\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineMantineDemo />);\n')),(0,a.kt)("p",null,"Refine doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," when clicked."),(0,a.kt)("p",null,"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list. In that way, ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," can fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const columns = React.useMemo<ColumnDef<IPost>[]>(\n  () => [\n    // --\n    {\n      id: "actions",\n      header: "Actions",\n      accessorKey: "id",\n      enableColumnFilter: false,\n      enableSorting: false,\n      cell: function render({ getValue }) {\n        return (\n          <Group spacing="xs" noWrap>\n            <EditButton hideText onClick={() => show(getValue() as number)} />\n          </Group>\n        );\n      },\n    },\n  ],\n  [],\n);\n\nconst table = useTable({\n  columns,\n});\n')),(0,a.kt)("p",null,"Don't forget to pass the record ",(0,a.kt)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms."))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"refinecoreprops"},"refineCoreProps"),(0,a.kt)("p",null,"All ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," properties are also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," documentation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const drawerForm = useDrawerForm({\n  refineCoreProps: {\n    action: "edit",\n    resource: "posts",\n    id: "1",\n  },\n});\n')),(0,a.kt)("h3",{id:"initialvalues"},"initialValues"),(0,a.kt)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed. This property is only available in ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"')," action."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const drawerForm = useDrawerForm({\n  initialValues: {\n    title: "Hello World",\n  },\n});\n')),(0,a.kt)("h3",{id:"defaultvisible"},"defaultVisible"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", drawer will be visible by default. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const drawerForm = useDrawerForm({\n  modalProps: {\n    defaultVisible: true,\n  },\n});\n")),(0,a.kt)("h3",{id:"autosubmitclose"},"autoSubmitClose"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", drawer will be closed after successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const drawerForm = useDrawerForm({\n  modalProps: {\n    autoSubmitClose: false,\n  },\n});\n")),(0,a.kt)("h3",{id:"autoresetform"},"autoResetForm"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", form will be reset after successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const drawerForm = useDrawerForm({\n  modalProps: {\n    autoResetForm: false,\n  },\n});\n")),(0,a.kt)("h3",{id:"syncwithlocation"},"syncWithLocation"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the drawers visibility state and the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the record will be synced with the URL. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"This property can also be set as an object ",(0,a.kt)("inlineCode",{parentName:"p"},"{ key: string; syncId?: boolean }")," to customize the key of the URL query parameter. ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," will be synced with the URL only if ",(0,a.kt)("inlineCode",{parentName:"p"},"syncId")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const drawerForm = useDrawerForm({\n  syncWithLocation: { key: "my-modal", syncId: true },\n});\n')),(0,a.kt)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,a.kt)("p",null,"If you want loading overtime for the request, you can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,a.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds while ",(0,a.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds."),(0,a.kt)("p",null,"Return the ",(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useDrawerForm({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n")),(0,a.kt)("h3",{id:"autosave"},"autoSave"),(0,a.kt)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.kt)("p",null,"By default the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnClose")," props to invalidate queries upon unmount or close."),(0,a.kt)("p",null,"It also supports ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed."),(0,a.kt)("h4",{id:"enabled"},"enabled"),(0,a.kt)("p",null,"To enable the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n    },\n  },\n});\n")),(0,a.kt)("h4",{id:"debounce"},"debounce"),(0,a.kt)("p",null,"Set the debounce time for the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," prop. Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"1000")," milliseconds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      debounce: 2000,\n    },\n  },\n});\n")),(0,a.kt)("h4",{id:"invalidateonunmount"},"invalidateOnUnmount"),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnUnmount: true,\n    },\n  },\n});\n")),(0,a.kt)("h4",{id:"invalidateonclose"},"invalidateOnClose"),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the drawer is closed. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnClose: true,\n    },\n  },\n});\n")),(0,a.kt)("h2",{id:"return-values"},"Return Values"),(0,a.kt)("p",null,"All ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," return values are also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm"),". You can find descriptions on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#return-values"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," documentation."),(0,a.kt)("p",null,"All ",(0,a.kt)("a",{parentName:"p",href:"https://mantine.dev/form/use-form/"},(0,a.kt)("inlineCode",{parentName:"a"},"mantine useForm"))," return values also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm"),". You can find descriptions on ",(0,a.kt)("a",{parentName:"p",href:"https://mantine.dev/form/use-form/"},(0,a.kt)("inlineCode",{parentName:"a"},"mantine"))," docs."),(0,a.kt)("h3",{id:"visible"},"visible"),(0,a.kt)("p",null,"Current visibility state of the drawer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const drawerForm = useDrawerForm({\n  defaultVisible: true,\n});\n\nconsole.log(drawerForm.modal.visible); // true\n")),(0,a.kt)("h3",{id:"title"},"title"),(0,a.kt)("p",null,"Title of the drawer. Based on resource and action values"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n  modal: { title },\n} = useDrawerForm({\n  refineCoreProps: {\n    resource: "posts",\n    action: "create",\n  },\n});\n\nconsole.log(title); // "Create Post"\n')),(0,a.kt)("h3",{id:"close"},"close"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"close")," is a function that can close the drawer. It's useful when you want to close the drawer manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n  getInputProps,\n  modal: { close, visible, title },\n} = useDrawerForm();\n\nreturn (\n  <Drawer opened={visible} onClose={close} title={title}>\n    <TextInput mt={8} label="Title" placeholder="Title" {...getInputProps("title")} />\n    <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n      <SaveButton {...saveButtonProps} />\n      <Button onClick={close}>Cancel</Button>\n    </Box>\n  </Drawer>\n);\n')),(0,a.kt)("h3",{id:"submit"},"submit"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"submit")," is a function that can submit the form. It's useful when you want to submit the form manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n  modal: { submit },\n} = useDrawerForm();\n\n// ---\n\nreturn (\n  <Drawer opened={visible} onClose={close} title={title}>\n    <TextInput mt={8} label="Title" placeholder="Title" {...getInputProps("title")} />\n    <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n      <Button onClick={submit}>Save</Button>\n    </Box>\n  </Drawer>\n);\n')),(0,a.kt)("h3",{id:"show"},"show"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"shows")," is a function that can show the drawer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n  getInputProps,\n  modal: { close, visible, title, show },\n} = useDrawerForm();\n\nconst onFinishHandler = (values) => {\n  onFinish(values);\n  show();\n};\n\nreturn (\n  <>\n    <Button onClick={}>Show Modal</Button>\n    <Drawer opened={visible} onClose={close} title={title}>\n      <TextInput mt={8} label="Title" placeholder="Title" {...getInputProps("title")} />\n      <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n        <SaveButton {...saveButtonProps} />\n      </Box>\n    </Drawer>\n  </>\n);\n')),(0,a.kt)("h3",{id:"savebuttonprops"},"saveButtonProps"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"saveButtonProps"),' contains all the props needed by the "submit" button within the drawer (disabled,loading etc.). You can manually pass these props to your custom button.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { getInputProps, modal, saveButtonProps } = useDrawerForm();\n\nreturn (\n  <Drawer {...modal}>\n    <TextInput mt={8} label="Title" placeholder="Title" {...getInputProps("title")} />\n    <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n      <Button\n        {...saveButtonProps}\n        onClick={(e) => {\n          // -- your custom logic\n          saveButtonProps.onClick(e);\n        }}\n      />\n    </Box>\n  </Drawer>\n);\n')),(0,a.kt)("h3",{id:"overtime"},"overtime"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useDrawerForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n")),(0,a.kt)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," properties from mutation."),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,a.kt)("p",null,"You may need to modify the form data before it is sent to the API."),(0,a.kt)("p",null,"For example, Let's send the values we received from the user in two separate inputs, ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"surname"),", to the API, as ",(0,a.kt)("inlineCode",{parentName:"p"},"fullName"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import { Drawer, TextInput } from "@mantine/core";\nimport { useDrawerForm } from "@refinedev/mantine";\nimport React from "react";\n\nconst UserCreate: React.FC = () => {\n  const {\n    getInputProps,\n    saveButtonProps,\n    modal: { show, close, title, visible },\n  } = useDrawerForm({\n    refineCoreProps: { action: "create" },\n    initialValues: {\n      name: "",\n      surname: "",\n    },\n    // highlight-start\n    transformValues: (values) => ({\n      fullName: `${values.name} ${values.surname}`,\n    }),\n    // highlight-end\n  });\n\n  return (\n    <Drawer opened={visible} onClose={close} title={title}>\n      <TextInput mt={8} label="Name" placeholder="Name" {...getInputProps("name")} />\n      <TextInput mt={8} label="Surname" placeholder="Surname" {...getInputProps("surname")} />\n      <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n        <Button\n          {...saveButtonProps}\n          onClick={(e) => {\n            // -- your custom logic\n            saveButtonProps.onClick(e);\n          }}\n        />\n      </Box>\n    </Drawer>\n  );\n};\n')),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h3",{id:"properties-1"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"modalProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Configuration object for the modal or drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#modalpropstype"},(0,a.kt)("inlineCode",{parentName:"a"},"ModalPropsType")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"refineCoreProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Configuration object for the core of the ",(0,a.kt)("a",{parentName:"td",href:"/docs/data/hooks/use-form/"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/data/hooks/use-form/#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"UseFormProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"@mantine/form"),"'s ",(0,a.kt)("inlineCode",{parentName:"td"},"useForm")," properties"),(0,a.kt)("td",{parentName:"tr",align:null},"See ",(0,a.kt)("a",{parentName:"td",href:"/docs/ui-integrations/mantine/hooks/use-form"},"useForm")," documentation"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"modalpropstype"},"ModalPropsType"))),(0,a.kt)("table",{parentName:"blockquote"},(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"defaultVisible"),(0,a.kt)("td",{parentName:"tr",align:null},"Initial visibility state of the modal"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"false"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoSubmitClose"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the form should be submitted when the modal is closed"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoResetForm"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the form should be reset when the form is submitted"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")))))),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Form values for mutation function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Record<string, unknown>"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TTransformed"),(0,a.kt)("td",{parentName:"tr",align:null},"Form values after transformation for mutation function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TVariables"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponse"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TError"))))),(0,a.kt)("h3",{id:"return-values-1"},"Return values"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"modal"),(0,a.kt)("td",{parentName:"tr",align:null},"Relevant states and methods to control the modal or drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#modalreturnvalues"},(0,a.kt)("inlineCode",{parentName:"a"},"ModalReturnValues")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"refineCore"),(0,a.kt)("td",{parentName:"tr",align:null},"The return values of the ",(0,a.kt)("a",{parentName:"td",href:"/docs/data/hooks/use-form/"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," in the core"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/data/hooks/use-form/#return-values"},(0,a.kt)("inlineCode",{parentName:"a"},"UseFormReturnValues")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"@mantine/form"),"'s ",(0,a.kt)("inlineCode",{parentName:"td"},"useForm")," return values"),(0,a.kt)("td",{parentName:"tr",align:null},"See ",(0,a.kt)("a",{parentName:"td",href:"/docs/ui-integrations/mantine/hooks/use-form"},"useForm")," documentation"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"overtime"),(0,a.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))))),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"modalreturnvalues"},"ModalReturnValues"))),(0,a.kt)("table",{parentName:"blockquote"},(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"visible"),(0,a.kt)("td",{parentName:"tr",align:null},"State of modal visibility"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"show"),(0,a.kt)("td",{parentName:"tr",align:null},"Sets the visible state to true"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"close"),(0,a.kt)("td",{parentName:"tr",align:null},"Sets the visible state to false"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"submit"),(0,a.kt)("td",{parentName:"tr",align:null},"Submits the form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(values: TVariables) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"title"),(0,a.kt)("td",{parentName:"tr",align:null},"Modal title based on resource and action value"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ disabled: boolean, onClick: (e: React.FormEvent<HTMLFormElement>) => void; }")))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(h,{path:"form-mantine-use-drawer-form",mdxType:"CodeSandboxExample"}))}N.isMDXComponent=!0}}]);